<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Charlotte-Ngs</title>
 <link href="http://charlotte-ngs.github.io/atom.xml" rel="self"/>
 <link href="http://charlotte-ngs.github.io/"/>
 <updated>2014-12-11T18:01:17+01:00</updated>
 <id>http://charlotte-ngs.github.io</id>
 <author>
   <name>Charlotte-Ngs Team</name>
   <email>ngs.charlotte@gmail.com</email>
 </author>

 
 <entry>
   <title>Multiple Linear Regression In R</title>
   <link href="http://charlotte-ngs.github.io//2014/11/24/MultipleRegressionInR/"/>
   <updated>2014-11-24T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2014/11/24/MultipleRegressionInR</id>
   <content type="html">&lt;p&gt;At the time I was putting together some slides on an &lt;a href=&quot;http://charlotte-ngs.github.io/RCrashCourse&quot;&gt;introduction to R&lt;/a&gt;, I wanted to integrate something very basic about linear modelling. But very soon I realized that this would be too much material for one series of slides. Hence I decided to put away the material on linear models for a separate post and a new series of slides.&lt;/p&gt;

&lt;p&gt;The introduction to multiple linear regression comes in two versions. First, an example analysis of the Chatterjee–Price Attitude dataset is described in a &lt;a href=&quot;http://charlotte-ngs.github.io/MultLinRegInR/notes/2014-11-04-MultipleRegressionInR.html&quot;&gt;blog post&lt;/a&gt;. Second, the same material is also presented as a &lt;a href=&quot;http://charlotte-ngs.github.io/MultLinRegInR/slides/MultLinRegInR.html&quot;&gt;series of slides&lt;/a&gt; which can freely be used for courses or presentations. &lt;/p&gt;

&lt;h2&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;The description of the multiple linear regression analysis is based on a course on Computational Statistics taught by Martin Mächler and Peter Bühlmann at ETH Zurich. The &lt;a href=&quot;http://stat.ethz.ch/education/semesters/ss2014/CompStat&quot;&gt;course notes&lt;/a&gt; contain more topics than just multiple linear regression and are certainly worth while having a look at. I want to thank both authors for this course and for sharing their course notes online.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Update Mac Os X to Yosemite</title>
   <link href="http://charlotte-ngs.github.io//2014/10/27/UpdateYosemite/"/>
   <updated>2014-10-27T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2014/10/27/UpdateYosemite</id>
   <content type="html">&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;All those who want to stay on the safe side and hate to work around issues and new features, are best advised to wait with an upgrade to Yosemite. Also for production systems, an upgrade is probably still a bit early. Unlike with the previous upgrade to Mac Os X 10.9, no real performance boost is perceived when upgading to &lt;code&gt;Yosemite&lt;/code&gt;. Although one has to admit that all the points mentioned here against the upgrade are nowhere near the nightmare of an upgrade from Windows 7 to 8. &lt;/p&gt;

&lt;h2&gt;Prerequisite&lt;/h2&gt;

&lt;p&gt;Before one upgrades a whole operating system, a complete backup of user data is an absolute must. Mac Os X has a backup utility called TimeMachine which comes for free with the system. All one has to do is connect an external hard-drive and start a backup using Time Machine by clicking on the following icon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/2014-10-27-UpdateYosemite/TimeMachine.png&quot; alt=&quot;Time Machine&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Download&lt;/h2&gt;

&lt;p&gt;Last weekend I decided to upgrade Mac Os X on my Mac Book to version 10.10 aka &lt;code&gt;Yosemite&lt;/code&gt;. The upgrade process is started from the AppStore. When you open the AppStore there is a big banner with the Yosemite Logo and a small Update button. Whenever you click on that button the download starts. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/2014-10-27-UpdateYosemite/AppStoreYosemite.png&quot; alt=&quot;Yosemite Logo&quot;&gt;&lt;/p&gt;

&lt;p&gt;It took more than three hours to download which is most likely caused by my very slow connection to the internet at home. In total, the upgrade to Yosemite is worth 5.16 GB of data. &lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Once the download was completed the installation of the upgrade can be started from the Download folder. I have not followed the installation closely, but it took quite a long time and several restarts were required. The whole installation did not require any intervention from the user side. In case somebody is interested in more details, one cat press Command-L which is supposed to show more details about the progress of the installation. The timings shown during the installation were not very accurate. For about half an hour the installation screen was showing the message &lt;code&gt;2 minutes left ...&lt;/code&gt;. It seams that the upgrade utility is copying parts of the user data or installed software to a secure place and that can take a lot of time depending on how much data has to be copied.&lt;/p&gt;

&lt;h2&gt;Aftermath&lt;/h2&gt;

&lt;p&gt;The whole upgrade process went very smoothly. The default desktop background changed and the dock looks different but appart from that no obvious changes. When maximizing a window using the green dot in the top-left corner, the window is shown in a full-screen mode. This full-screen mode can be terminated by pointing the cursor to the top border of the screen. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/2014-10-27-UpdateYosemite/RedYellowGreenDots.png&quot; alt=&quot;RedYellowGreenDots&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Path Issue&lt;/h3&gt;

&lt;p&gt;In a &lt;a href=&quot;http://tex.stackexchange.com/questions/208181/why-did-my-tex-related-gui-program-stop-working-in-mac-os-x-yosemite&quot;&gt;post on tex.stackexchange.com&lt;/a&gt;, Adam Maxwell mentioned that GUI programs using TEX tools like &lt;code&gt;pdflatex&lt;/code&gt; stopped working after upgrading to Yosemite. In the background section of the post the author explains that GUI programs do no longer inherit variables from shell init files like .bash_profile, .bashrc or others.&lt;/p&gt;

&lt;p&gt;For RStudio this meant that when creating a new Sweave document, RStudio would put up the message that it cannot find any TeX installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/2014-10-27-UpdateYosemite/NoTeXInstallationRStudio.png&quot; alt=&quot;No TeX Installation in RStudio&quot;&gt;&lt;/p&gt;

&lt;p&gt;When trying to compile, the unsurprising error message appears in the Compile PDF console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/2014-10-27-UpdateYosemite/PdflatexErrorMessage.png&quot; alt=&quot;Pdflatex Error Message&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Fix for RStudio&lt;/h3&gt;

&lt;p&gt;Shortly after the post by Adam Maxwell there were posts appearing on &lt;a href=&quot;http://www.r-bloggers.com/r-and-rstudio-incompatibility-with-yosemite-mac-os-x-10-10/?utm_source=feedburner&amp;amp;utm_medium=email&amp;amp;utm_campaign=Feed%3A+RBloggers+%28R+bloggers%29&quot;&gt;Rbloggers&lt;/a&gt; and the &lt;a href=&quot;https://support.rstudio.com/hc/en-us/articles/203815576-RStudio-PATH-problems-with-OS-X-Yosemite&quot;&gt;RStudio web-site&lt;/a&gt; announcing that the latest version (Version 0.98.1083) of RStudio would fix the path problem. After installing that latest version, no more messages of missing TeX installations and compiling Sweave documents worked again. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction To Dplyr</title>
   <link href="http://charlotte-ngs.github.io//2014/10/22/IntroductionToDplyr/"/>
   <updated>2014-10-22T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2014/10/22/IntroductionToDplyr</id>
   <content type="html">&lt;h2&gt;Before dplyr&lt;/h2&gt;

&lt;p&gt;The R-package &lt;code&gt;dplyr&lt;/code&gt; represents an important milestone in the history of R. Before &lt;code&gt;dplyr&lt;/code&gt; existed, data manipulation was not considered to be a strong point of the R system. I even remember very vaguely that even John Chambers was advocating in one of his talks many years ago, that data preparation is better done by some scripting language, like python or perl.&lt;/p&gt;

&lt;h2&gt;What is it all about&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; can be understood as a language of data manipulation. The language consists only of a small number of verbs each designed to perform a well defined task. Each of the verbs is implemented in an R function. Data manipulation processes can be constructed by chaining together sequences of verbs to a pipeline.&lt;/p&gt;

&lt;h2&gt;Getting started&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://charlotte-ngs.github.io/dplyrIntro&quot;&gt;Introductory slides&lt;/a&gt; show the basic usage of &lt;code&gt;dplyr&lt;/code&gt; using Andersons Iris data set.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dplyr&lt;/code&gt; package is available through CRAN, hence &lt;code&gt;dplyr&lt;/code&gt; can be installed via&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;r language-r&quot; data-lang=&quot;r&quot;&gt;install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dplyr&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The introductory vignette to &lt;code&gt;dplyr&lt;/code&gt; available through&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;r language-r&quot; data-lang=&quot;r&quot;&gt;browseVignettes&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;package &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dplyr&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;demonstrates the application of &lt;code&gt;dplyr&lt;/code&gt; to the New York City airport flights dataset.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to R</title>
   <link href="http://charlotte-ngs.github.io//2014/10/14/IntroductionToR/"/>
   <updated>2014-10-14T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2014/10/14/IntroductionToR</id>
   <content type="html">&lt;p&gt;When working with big data which is certainly the case in the area of
next generation sequencing (NGS), it is important to have a set of tools 
or a system that supports the user in managing and analysing the available 
data. &lt;/p&gt;

&lt;h2&gt;The R System&lt;/h2&gt;

&lt;p&gt;In statistical data analysis &lt;a href=&quot;http://www.r-project.org&quot;&gt;R&lt;/a&gt; has become very 
popular. The philosophy of R is similar to the one of Unix of building a system 
using small tools. Hence the base of R is relatively small. But that small base 
can easily be extended by a large number of packages. The Comprehensive R Archive 
Network &lt;a href=&quot;http://cran.r-project.org/&quot;&gt;CRAN&lt;/a&gt; is the main repository for packages 
extending the functionality of the R system.&lt;/p&gt;

&lt;h2&gt;Bioconductor&lt;/h2&gt;

&lt;p&gt;When working with data from Bio- or Life-Sciences, &lt;a href=&quot;http://www.bioconductor.org&quot;&gt;Bioconductor&lt;/a&gt; 
is a very valuable resource. Bioconductor does not only provide a large set of 
R packages but it does also offer standardized workflows and example datasets. 
In general Bioconductor documentation is provided by vignettes following the 
paradigm of reproducible research.&lt;/p&gt;

&lt;h2&gt;Why R&lt;/h2&gt;

&lt;p&gt;Because first of all R is very fast in prototyping and second R is easy to extend 
either by writing packages in R or by using its interfaces to other languages. &lt;/p&gt;

&lt;p&gt;Dirk Edelbuettel explained why to use R in a &lt;a href=&quot;https://www.youtube.com/watch?v=UZkaZhsOfT4&quot;&gt;Google Tech Talk&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;R Crash Course&lt;/h2&gt;

&lt;p&gt;Learning how to use a system like R is associated with a certain learning curve. 
Some people pretend that this curve is especially steep when learning how to use R. &lt;/p&gt;

&lt;p&gt;As an introduction, I have put together some slides which I would use to introduce 
R to an audience without prior knowledge. In case you are interested you can &lt;a href=&quot;http://charlotte-ngs.github.io/RCrashCourse&quot;&gt;read more 
here ...&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How To Get Started</title>
   <link href="http://charlotte-ngs.github.io//2014/08/20/how-to-get-started/"/>
   <updated>2014-08-20T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2014/08/20/how-to-get-started</id>
   <content type="html">&lt;p&gt;Most Blogs start by a report on how to get started with blogging. This blog should not be any different. Not that it is particularly interesting, but maybe someone else out there has the same difficulties that I had and maybe these lines can help getting over those difficulties a little faster.&lt;/p&gt;

&lt;h2&gt;History&lt;/h2&gt;

&lt;p&gt;Before coming here I started a blog using &lt;a href=&quot;http://www.evernote.com&quot;&gt;Evernote&lt;/a&gt; linked to &lt;a href=&quot;http://postach.io&quot;&gt;Postach.io&lt;/a&gt;. This was very convenient, because I use Evernote on a daily basis. When writing a post about programming concepts, I want to follow the paradigm of reproducible research or reproducible programming, i.e., no copy-pasting of code and results. Everything is produced by one single source file. At the time when I got started with my Evernote blog I did not see how to implement the strategy of reproducible programming. &lt;/p&gt;

&lt;h2&gt;Goal&lt;/h2&gt;

&lt;p&gt;As mentioned above, the goal for my ideal blogging environment was to write one source file with everything and then have some clever system produce all the output that was desired. I was reading some blog posts about blogging like a hacker &lt;code&gt;reference needed here&lt;/code&gt; and thereby I found using GitHub pages was what I wanted.&lt;/p&gt;

&lt;h2&gt;GitHub&lt;/h2&gt;

&lt;p&gt;GitHub offers free hosting of custom web-sites through GitHub pages. All one has to do is &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create an account on GitHub and &lt;/li&gt;
&lt;li&gt;within that account create a repository called &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; where &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; is to be replaced by the actual username you chose for the GitHub account. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After these two steps, your blog web-site is available at &lt;code&gt;username.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;Jekyll is a blog-aware static site generator which means documents in Markdown format are automatically conterted into static HTML pages. Furthermore, running Jekyll on your local machine gives you the possibility to serve every page locally without having to upload anything. &lt;/p&gt;

&lt;h2&gt;Poole&lt;/h2&gt;

&lt;p&gt;Poole provides an example setup for a Jekyll site. It comes with a set of templates, pages, styles and posts. This is very convenient for any beginner, because all one has to do is clone the sources provided by Poole, change the content to its own site and a new blog-site is ready to be served in only a very short time. &lt;/p&gt;
</content>
 </entry>
 

</feed>
