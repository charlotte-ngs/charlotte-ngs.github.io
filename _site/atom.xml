<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Charlotte-Ngs</title>
 <link href="http://charlotte-ngs.github.io/atom.xml" rel="self"/>
 <link href="http://charlotte-ngs.github.io/"/>
 <updated>2016-02-09T13:17:22+01:00</updated>
 <id>http://charlotte-ngs.github.io</id>
 <author>
   <name>Charlotte-Ngs Team</name>
   <email>ngs.charlotte@gmail.com</email>
 </author>

 
 <entry>
   <title>R Package Guide</title>
   <link href="http://charlotte-ngs.github.io//2016/01/26/RPackageGuide/"/>
   <updated>2016-01-26T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2016/01/26/RPackageGuide</id>
   <content type="html">&lt;p&gt;R packages are great in organizing all material such as source code, data and documentation belonging to a certain project into a standardized structure. This structure can be extended and together with some tools such as &lt;a href=&quot;https://www.rstudio.com&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rstudio&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.rstudio.com/products/rpackages/devtools&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;devtools&lt;/code&gt;&lt;/a&gt;, it provides great functionality.&lt;/p&gt;

&lt;h2 id=&quot;other-guides&quot;&gt;Other Guides&lt;/h2&gt;
&lt;p&gt;The ultimate guide to R package development is the document &lt;a href=&quot;https://cran.r-project.org/doc/manuals/r-release/R-exts.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Writing R Extensions&lt;/code&gt;&lt;/a&gt; that comes with every R installation and is part of the help system in R. Hadley Wickham has a book out on &lt;a href=&quot;http://r-pkgs.had.co.nz&quot;&gt;R Packages&lt;/a&gt; which is also available online.&lt;/p&gt;

&lt;p&gt;The shortest description I have ever seen is the one on &lt;a href=&quot;http://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch&quot;&gt;Hillary Parker’s blog&lt;/a&gt;. I consider her blog post to be the minimal guide to constructing an R package. Some of the function calls have change though since the blog post was written.&lt;/p&gt;

&lt;p&gt;Something in between all the above mentioned references is Karl Browmans &lt;a href=&quot;http://kbroman.org/pkg_primer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R package primer&lt;/code&gt;&lt;/a&gt;. I like his tutorial, because it explains many things very well, but it is still reasonably sized.&lt;/p&gt;

&lt;h2 id=&quot;why-packages&quot;&gt;Why packages&lt;/h2&gt;
&lt;p&gt;Whenever I start a new project, I either create some new notes in Evernote, or I create a new directory somewhere on my harddrive or I start a new repository on github or I do something else. The problem with that rather chaotic approach is that a few weeks after the project gets started, someone else including future me, has enormous difficulties in understanding all the material that is available for that specific project.&lt;/p&gt;

&lt;p&gt;Organizing everything into a project can help remedy that. Creating a package is very simple when doing it inside RStudio in connection with an RStudio project and when using the functionalities of package &lt;code class=&quot;highlighter-rouge&quot;&gt;devtools&lt;/code&gt;. Once a package is created a standard structure of files and directories is given and source code, documentation and data are all stored in a given location inside the package directory tree.&lt;/p&gt;

&lt;h2 id=&quot;let-us-get-started&quot;&gt;Let us get started&lt;/h2&gt;
&lt;p&gt;In RStudio a package is started by creating a new project. Use the menu &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;New Project&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2016-01-26-RPackageGuide/NewProject.png&quot; alt=&quot;New Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This starts the process of creating a new project in RStudio. The next screen shows three available options available for project creation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2016-01-26-RPackageGuide/NewProjectOption.png&quot; alt=&quot;New Project Options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first option &lt;code class=&quot;highlighter-rouge&quot;&gt;New Directory&lt;/code&gt; is used to start a new project from scratch in a new directory. The second option adds project-specific properties to an existing directory. Option number three allows the user to checkout or to clone a project from a version control repository such as &lt;a href=&quot;https://github.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;start-from-scratch&quot;&gt;Start from scratch&lt;/h3&gt;
&lt;p&gt;In our example shown here, we start a new project from scratch using the first of the three project creation options. This brings up a window with three new options from which we choose to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;New Package&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2016-01-26-RPackageGuide/NewPackage.png&quot; alt=&quot;New Package&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For our new package, we have to specify a package name. Optionally, the directory where the package should be stored can be indicated and with the check box &lt;code class=&quot;highlighter-rouge&quot;&gt;Create a git repository&lt;/code&gt; checked, an empty git repository is created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2016-01-26-RPackageGuide/PackageInfo.png&quot; alt=&quot;Package Info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;congratulations&quot;&gt;Congratulations&lt;/h2&gt;
&lt;p&gt;That is all, a minimal package is created. Besides a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello world&lt;/code&gt; function there is not much more functionality available so far. But that is easy to change.&lt;/p&gt;

&lt;h3 id=&quot;r-functions&quot;&gt;R functions&lt;/h3&gt;
&lt;p&gt;All R-functions should be stored in package subdirectory &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;. The functions should be documented using comments that follow the &lt;a href=&quot;https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;roxygen2&lt;/code&gt;&lt;/a&gt; format specification. 
Based on those comments documentation in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Rd&lt;/code&gt; format can be generated using&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
devtools::document()
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;vignettes&quot;&gt;Vignettes&lt;/h3&gt;
&lt;p&gt;Vignettes are more extended documentation like articles that describe in more detail the functionality of the package components. A vignette document is created using&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
devtools::use_vignette(name=&quot;myvignette&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates subdirectory &lt;code class=&quot;highlighter-rouge&quot;&gt;vignettes&lt;/code&gt; if it does not exist and in that subdirectory it puts a template of a R-markdown document called &lt;code class=&quot;highlighter-rouge&quot;&gt;myvignette.Rmd&lt;/code&gt;. This template can be changed to the desired content of the description of our package.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Before installing our package, we would like to test it first. The namespace of our package can be loaded using the command&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
devtools::load_all()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This simulates installation of the package and loading the namespace. Hence all functions become available in the current R-session.&lt;/p&gt;

&lt;h2 id=&quot;pushing-local-repository-to-github&quot;&gt;Pushing local repository to GitHub&lt;/h2&gt;
&lt;p&gt;So far all changes inside our projects were only committed to the local git repository. This is fine for purposes of version control. But, everything becomes much more interesting and fun, when we start sharing our code with others. One of the repositories that is famous for sharing code is &lt;a href=&quot;https://github.com/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GitHub&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hadley Wickham’s book on &lt;a href=&quot;http://r-pkgs.had.co.nz/git.html&quot;&gt;R packages&lt;/a&gt; has an excellent description on how to synchronize a local repository with GitHub. The description in section &lt;code class=&quot;highlighter-rouge&quot;&gt;Synchronising with GitHub&lt;/code&gt; assumes that you as a user alread have an account on GitHub. That can easily be created when opening the main website of GitHub on https://github.com.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
sessionInfo()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
## R version 3.2.3 (2015-12-10)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 7 x64 (build 7601) Service Pack 1
## 
## locale:
## [1] LC_COLLATE=German_Switzerland.1252  LC_CTYPE=German_Switzerland.1252   
## [3] LC_MONETARY=German_Switzerland.1252 LC_NUMERIC=C                       
## [5] LC_TIME=German_Switzerland.1252    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## loaded via a namespace (and not attached):
##  [1] magrittr_1.5    formatR_1.2.1   htmltools_0.2.6 tools_3.2.3    
##  [5] yaml_2.1.13     stringi_1.0-1   rmarkdown_0.8.2 knitr_1.12     
##  [9] stringr_1.0.0   digest_0.6.9    evaluate_0.8
&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Problem With rJava On Mac OS X El Capitan</title>
   <link href="http://charlotte-ngs.github.io//2016/01/05/MacOsXrJavaProblem/"/>
   <updated>2016-01-05T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2016/01/05/MacOsXrJavaProblem</id>
   <content type="html">&lt;p&gt;Since I upgraded my Mac to OS X El Capitan (version 10.11.2) I am having problems with the R-package &lt;a href=&quot;https://www.rforge.net/rJava&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt;&lt;/a&gt;. From what I understood, eventually, it is not a problem of &lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt; or R or RStudio in the first place, but newer versions of Mac OS X do not play well with the latest versions of Oracle’s Java (jdk). Furthermore, some new security features in Mac OS X prevent that environment path settings are passed along to applications like RStudio.&lt;/p&gt;

&lt;p&gt;In what follows, I listed the steps that solved for me the problem that the package &lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt; could not be loaded from within RStudio under Mac OS X El Capitan (version 10.11.2).&lt;/p&gt;

&lt;h3 id=&quot;problem-statement&quot;&gt;Problem statement&lt;/h3&gt;
&lt;p&gt;Unfortunately, the package &lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt; does not just fail to load, but the R GUI for Mac terminates instantly and in RStudio the R-session gets closed. Both effects are pretty annoying! See the screen shot below on how that might look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2016-01-05-MacOsXrJavaProblem/RSessionAbort.png&quot; alt=&quot;R session abort&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-research&quot;&gt;Some research&lt;/h3&gt;
&lt;p&gt;After searching the web, the details of the problem are still not clear to me. But it appears that OS X has problems recognizing newer versions Oracle’s Java. OS X seams to be looking for a legacy version 6 of Apple’s own build of Java. As shown in the next section one solution seams to be the installation of Apple’s legacy version 6 of Java and a newer version (e.g. 1.8.0_66) of Oracle’s Java at the same time.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;
&lt;p&gt;The post available at https://github.com/snowflakedb/dplyr-snowflakedb/wiki/Configuring-R-rJava-RJDBC-on-Mac-OS-X solved my problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt; on Mac OS X 10.11.2.&lt;/p&gt;

&lt;h3 id=&quot;java-6&quot;&gt;Java 6&lt;/h3&gt;
&lt;p&gt;I already had XCode command line tools installed, so I started at section &lt;code class=&quot;highlighter-rouge&quot;&gt;Java 6&lt;/code&gt;. I downloaded the legacy Java 6 runtime from https://support.apple.com/kb/DL1572?locale=de_DE and installed the downloaded &lt;code class=&quot;highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&quot;java-8&quot;&gt;Java 8&lt;/h3&gt;
&lt;p&gt;Since I had already installed the latest version of Oracle’s jdk from http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html, I skipped the step.&lt;/p&gt;

&lt;p&gt;The output of &lt;code class=&quot;highlighter-rouge&quot;&gt;java_home&lt;/code&gt; on my machine looks as follows&lt;/p&gt;

&lt;p&gt;```
YARLI:Downloads peter$ /usr/libexec/java_home -V
Matching Java Virtual Machines (5):
    1.8.0_66, x86_64:	“Java SE 8”	/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home
    1.7.0_67, x86_64:	“Java SE 7”	/Library/Java/JavaVirtualMachines/jdk1.7.0_67.jdk/Contents/Home
    1.7.0_25, x86_64:	“Java SE 7”	/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home
    1.6.0_65-b14-468, x86_64:	“Java SE 6”	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
    1.6.0_65-b14-468, i386:	“Java SE 6”	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&lt;/p&gt;

&lt;p&gt;/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home
```&lt;/p&gt;

&lt;p&gt;Please note the 1.7 version are really not needed here.&lt;/p&gt;

&lt;h3 id=&quot;r-for-os-x&quot;&gt;R for OS X&lt;/h3&gt;
&lt;p&gt;The latest version of R was already running, so I skipped this step. The check with &lt;code class=&quot;highlighter-rouge&quot;&gt;javareconf&lt;/code&gt; gave the following result.&lt;/p&gt;

&lt;p&gt;```
YARLI:Downloads peter$ R CMD javareconf
Java interpreter : /usr/bin/java
Java version     : 1.8.0_66
Java home path   : /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre
Java compiler    : /usr/bin/javac
Java headers gen.: /usr/bin/javah
Java archive tool: /usr/bin/jar
Non-system Java on OS X&lt;/p&gt;

&lt;p&gt;trying to compile and link a JNI program 
detected JNI cpp flags    : -I$(JAVA_HOME)/../include -I$(JAVA_HOME)/../include/darwin
detected JNI linker flags : -L$(JAVA_HOME)/lib/server -ljvm
clang -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG -I/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/../include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/../include/darwin -I/usr/local/include -I/usr/local/include/freetype2 -I/opt/X11/include    -fPIC  -Wall -mtune=core2 -g -O2  -c conftest.c -o conftest.o
clang -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress -L/Library/Frameworks/R.framework/Resources/lib -L/usr/local/lib -o conftest.so conftest.o -L/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server -ljvm -F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework -Wl,CoreFoundation&lt;/p&gt;

&lt;p&gt;JAVA_HOME        : /Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre
Java library path: $(JAVA_HOME)/lib/server
JNI cpp flags    : -I$(JAVA_HOME)/../include -I$(JAVA_HOME)/../include/darwin
JNI linker flags : -L$(JAVA_HOME)/lib/server -ljvm
Updating Java configuration in /Library/Frameworks/R.framework/Resources
Done.
```&lt;/p&gt;

&lt;h3 id=&quot;rjava&quot;&gt;rJava&lt;/h3&gt;
&lt;p&gt;As the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt; from CRAN did not work, I took the latest version from &lt;code class=&quot;highlighter-rouge&quot;&gt;rforge&lt;/code&gt; and installed that one.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
curl -#ROL https://www.rforge.net/rJava/snapshot/rJava_0.9-8.tar.gz
R CMD INSTALL rJava_0.9-8.tar.gz
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A quick check whether &lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt; can be loaded, is done as follows&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
R --quiet -e &#39;library(&quot;rJava&quot;); .jinit(); .jcall(&quot;java/lang/System&quot;, &quot;S&quot;, &quot;getProperty&quot;, &quot;java.runtime.version&quot;)&#39;
&amp;gt; library(&quot;rJava&quot;); .jinit(); .jcall(&quot;java/lang/System&quot;, &quot;S&quot;, &quot;getProperty&quot;, &quot;java.runtime.version&quot;)
[1] &quot;1.8.0_66-b17&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;rstudio&quot;&gt;RStudio&lt;/h3&gt;
&lt;p&gt;Running the above check on the RStudio console still gives the following error&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
library(&quot;rJava&quot;); .jinit(); .jcall(&quot;java/lang/System&quot;, &quot;S&quot;, &quot;getProperty&quot;, &quot;java.runtime.version&quot;)
Error : .onLoad failed in loadNamespace() for &#39;rJava&#39;, details:
  call: dyn.load(file, DLLpath = DLLpath, ...)
  error: unable to load shared object &#39;/Library/Frameworks/R.framework/Versions/3.2/Resources/library/rJava/libs/rJava.so&#39;:
  dlopen(/Library/Frameworks/R.framework/Versions/3.2/Resources/library/rJava/libs/rJava.so, 6): Library not loaded: @rpath/libjvm.dylib
  Referenced from: /Library/Frameworks/R.framework/Versions/3.2/Resources/library/rJava/libs/rJava.so
  Reason: image not found
Error: package or namespace load failed for ‘rJava’
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For some reason which might be connected to a new security feature of Mac OS X, the file &lt;code class=&quot;highlighter-rouge&quot;&gt;libjvm.dylib&lt;/code&gt; cannot be found. Loading this library explicitly, as was described in http://stackoverflow.com/questions/30738974/rjava-load-error-in-rstudio-r-after-upgrading-to-osx-yosemite, finally solves the problem.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
dyn.load(&#39;/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib&#39;)
require(rJava)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
## Loading required package: rJava
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
.jinit()
.jcall(&quot;java/lang/System&quot;, &quot;S&quot;, &quot;getProperty&quot;, &quot;java.runtime.version&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
## [1] &quot;1.8.0_66-b17&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
sessionInfo()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
## R version 3.2.3 (2015-12-10)
## Platform: x86_64-apple-darwin13.4.0 (64-bit)
## Running under: OS X 10.11.2 (El Capitan)
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] rJava_0.9-8
## 
## loaded via a namespace (and not attached):
##  [1] magrittr_1.5    formatR_1.2     tools_3.2.3     htmltools_0.2.6
##  [5] yaml_2.1.13     stringi_0.5-5   rmarkdown_0.8   knitr_1.11     
##  [9] stringr_1.0.0   digest_0.6.8    evaluate_0.8
&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Create Excel Spreadsheets Using R</title>
   <link href="http://charlotte-ngs.github.io//2016/01/03/CreateExcelSpreadsheetUsingR/"/>
   <updated>2016-01-03T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2016/01/03/CreateExcelSpreadsheetUsingR</id>
   <content type="html">&lt;p&gt;In the era of big data, people are more and more looking beyond the scope of what can be done with MS Excel. &lt;strong&gt;Love&lt;/strong&gt; it or &lt;strong&gt;hate&lt;/strong&gt; it, fact is that most data is still gathered, processed, analyzed and visualized using MS Excel. R provides a flexible framework that offers functionality that goes far beyond the possibilities that are available in Excel.&lt;/p&gt;

&lt;h3 id=&quot;the-need-for-good-interfaces&quot;&gt;The need for good interfaces&lt;/h3&gt;
&lt;p&gt;The fact that most data are still stored in Excel combined with the desire to use a flexible framework for analyzing the available data creates the need for good interfaces between R and Excel. A &lt;a href=&quot;http://www.r-bloggers.com/r-the-excel-connection/&quot;&gt;post&lt;/a&gt; on &lt;a href=&quot;http://www.r-bloggers.com&quot;&gt;Rbloggers&lt;/a&gt; has compared four packages that are available to interface between Excel and R.&lt;/p&gt;

&lt;h3 id=&quot;why-on-earth-would-you-want-to-bother&quot;&gt;Why on earth would you want to bother&lt;/h3&gt;
&lt;p&gt;For most people who do not have a computational background and do not what to overcome that initial learning curve of getting into the framework of R, use Excel as their only tool to work with data. We have a project in which one of our clients wants to further process and analyze the results of a statistical analysis. The statistical analysis is partly done in R and as a consequence all results are available as dataframes in R.&lt;/p&gt;

&lt;h3 id=&quot;the-old-days&quot;&gt;The old days&lt;/h3&gt;
&lt;p&gt;A few years back, the only way to transfer results from R to Excel would be to write the results into a csv-file and then read that file into Excel. While this is possible and worked for most cases, there are some nasty pitfalls with default assignment of cell formats in Excel. Nowadays we are lucky to have R-packages that provide more robust interfaces that take care of transering data from R into Excel.&lt;/p&gt;

&lt;h3 id=&quot;this-post&quot;&gt;This post&lt;/h3&gt;
&lt;p&gt;This post has a closer look of two of the four packages that were used in the above mentioned comparison. Those packages are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xlsx&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openxlsx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The focus of this post is clearly on the very specific task of having some results available in R as a dataframe and wanting to transfer these results into an Excel spreadsheet. Once the results are transfered, some formatting of rows and columns should be applied. We do not look at how well the inverse transfer of reading data from Excel into R works with the mentioned packages. Readers who are interestined in that type of data transfer will certainly find many useful sources by doing the obvious search on the web.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The above two packages are both great when it comes to transfering data from R into Excel. The first package &lt;code class=&quot;highlighter-rouge&quot;&gt;xlsx&lt;/code&gt; depends on the R-package &lt;code class=&quot;highlighter-rouge&quot;&gt;rJava&lt;/code&gt; which is not a problem, at least on Win 7/64. I am still having troubles to get the whole story to fly on my Mac (OS X El Capitan, version 10.11.2).&lt;/p&gt;

&lt;p&gt;If you are still interested to see in who the mentioned packages solve our particular problem, please &lt;a href=&quot;http://charlotte-ngs.github.io/RPackageXLSXHowTo/HowToForRPackageXLSX.html&quot;&gt;read on&lt;/a&gt; …&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Eclipse CDT As Alternative To XCode On The Mac</title>
   <link href="http://charlotte-ngs.github.io//2015/08/24/EclipseCdtXcodeAlt/"/>
   <updated>2015-08-24T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2015/08/24/EclipseCdtXcodeAlt</id>
   <content type="html">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;On Mac Os X the default IDE has been XCode for a long time. Recent versions of XCode have undergone massive changes in core functionalities. Some of the changes led to benefits mainly for the developers on mobile platforms. Developers that were writing terminal based C++ programs were facing difficulties in adjusting to the latest changes of XCode.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;To be continued&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>R Object Oriented Programming</title>
   <link href="http://charlotte-ngs.github.io//2015/08/15/RObjectOrientedProgramming/"/>
   <updated>2015-08-15T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2015/08/15/RObjectOrientedProgramming</id>
   <content type="html">&lt;p&gt;I learned object-oriented programming from the author of &lt;a href=&quot;http://www.amazon.de/Object-Oriented-Software-Construction-Prentice-engl/dp/0136291554&quot;&gt;Object Oriented Software Construction&lt;/a&gt;. Then I got more and more interested in data analysis where R is one of the main tools. Coming from languages like C++, Java or Eiffel, R’s concept of object oriented programming is quite different.&lt;/p&gt;

&lt;p&gt;Also at the beginning, it felt strange to have more than one object-oriented class system in one language. But on the other hand it also gives users the freedom to choose which system best fits to their needs.&lt;/p&gt;

&lt;p&gt;To get more familar with object oriented programming in R, I have done some experiments which are documented in this &lt;a href=&quot;http://charlotte-ngs.github.io/RExperimentsWithS4RC/ExperimentsWithS4AndRef.html&quot;&gt;companion post&lt;/a&gt;. Please read on and enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Computation Meets The Cloud</title>
   <link href="http://charlotte-ngs.github.io//2015/05/07/ComputationMeetsTheCloud/"/>
   <updated>2015-05-07T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2015/05/07/ComputationMeetsTheCloud</id>
   <content type="html">&lt;p&gt;This post introduces the potential synergies of computer algebra and cloud computing for data analysis. Recently, there has been a debate on some &lt;a href=&quot;http://www.r-bloggers.com/choosing-r-or-python-for-data-analysis-an-infographic&quot;&gt;blogs&lt;/a&gt; whether one should choose &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; for data analysis. Also &lt;code class=&quot;highlighter-rouge&quot;&gt;Julia&lt;/code&gt; is among the systems that has been advocated by some data analysts.&lt;/p&gt;

&lt;p&gt;In what follows, I might argue to consider the following points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In case, data analysis involves the derivation of symbolic formula, it is worth while considering a computer algebra system (CAS). This allows to integrate the formula derivation into a literate programming framework.&lt;/li&gt;
  &lt;li&gt;Systems that are available via the cloud such as &lt;a href=&quot;http://cloud.sagemath.com&quot;&gt;SageMathCloud&lt;/a&gt; (SMC) have the great advantage that they can be used without installing any program. Furthermore, SMC provides additional features such as creating LaTeX documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;terminology&quot;&gt;Terminology&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Computer algebra systems&lt;/code&gt; (CAS) are software programs that are able to manipulate symbolic mathematical formulas. CAS clearly specialize in symbolic computation which sets them apart from the systems that are mainly used for numeric computation such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Matlab&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Julia&lt;/code&gt; and others.&lt;/p&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;The development of CAS started in the 1960s. Currently &lt;a href=&quot;http://www.maplesoft.com&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Maple&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.wolfram.com/mathematica/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mathematica&lt;/code&gt;&lt;/a&gt; are the most widely known CAS. The were first released in the 1980s. &lt;a href=&quot;http://en.wikipedia.org/wiki/Computer_algebra_system&quot;&gt;Wikipedia&lt;/a&gt; gives a nice overview of CAS and their history.&lt;/p&gt;

&lt;h2 id=&quot;technical-aspects&quot;&gt;Technical Aspects&lt;/h2&gt;
&lt;p&gt;Traditionally CAS like many other tools are installed as standalone applications on local computers. This imposes high costs of resources on development teams to ensure portability across all different computer platforms.&lt;/p&gt;

&lt;p&gt;With the advent of cloud computing where applications do not have to be installed on local computers, but applications can be used through a web interface, this has changed dramatically. Google with their email, calendar and office applications was certainly a driving force in this development.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sagemath.org&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SageMath&lt;/code&gt;&lt;/a&gt; which is a relatively young CAS is going the same route as Google with their office applications. Instead of porting the system to all platforms, the SageMath team came up with a web front end which is called &lt;a href=&quot;http://cloud.sagemath.com&quot;&gt;SageMathCloud&lt;/a&gt;. SMC is like SageMath completely free. All it requires is to sign up for an account.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-smc&quot;&gt;Getting Started With SMC&lt;/h2&gt;
&lt;p&gt;As soon as one has signed up for an account on SMC, one is ready to sign in and SMC presents the starting page which is initially empty. The screen shot below shows a starting page with already existing projects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2015-05-07-ComputationMeetsTheCloud/smc_start_screen.png&quot; alt=&quot;SMC start screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When logging in for the first time, the only thing that can be done is creating a new project by hitting the &lt;code class=&quot;highlighter-rouge&quot;&gt;Create New Project...&lt;/code&gt; button in the middle of the page (see screen shot below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2015-05-07-ComputationMeetsTheCloud/CreateNewProjectButton.png&quot; alt=&quot;Create New Project Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking the &lt;code class=&quot;highlighter-rouge&quot;&gt;Create New Project...&lt;/code&gt; button, a popup appears where the user has to specify the name of the new project and its description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2015-05-07-ComputationMeetsTheCloud/CreateNewProjectPopUp.png&quot; alt=&quot;Create New Project Popup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside a project, one can either create or upload files or one can add collaborators to the project. SMC allows you to create very different types of files. Those types can be a&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sage worksheet&lt;/li&gt;
  &lt;li&gt;Terminal&lt;/li&gt;
  &lt;li&gt;Jupyter notebook&lt;/li&gt;
  &lt;li&gt;LaTeX document&lt;/li&gt;
  &lt;li&gt;Markdown document&lt;/li&gt;
  &lt;li&gt;Task List&lt;/li&gt;
  &lt;li&gt;Course&lt;/li&gt;
  &lt;li&gt;Sage program file&lt;/li&gt;
  &lt;li&gt;Phython program&lt;/li&gt;
  &lt;li&gt;Folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Appearently, SMC holds up the old unix tradition that really everything is a file. The above choice of file types are listed when clicking on the &lt;code class=&quot;highlighter-rouge&quot;&gt;New&lt;/code&gt; button. When clicking on the link in the middle of the project page, an even larger choice of different file types is listed.&lt;/p&gt;

&lt;h2 id=&quot;worksheets-notebooks-program-files-and-documents&quot;&gt;Worksheets, Notebooks, Program Files and Documents&lt;/h2&gt;
&lt;p&gt;In the above list of files that can be created inside of a project, there is a group of items which are traditionally understood as files. Those can contain program code and/or text. The format of the content is determined by the type of document that they can be associated to, i.e. a LaTeX document contains text and LaTeX commands or a Python program contains Python code, etc.&lt;/p&gt;

&lt;h3 id=&quot;latex-documents&quot;&gt;LaTeX Documents&lt;/h3&gt;
&lt;p&gt;When creating a LaTeX document the window is devided into two halves where on the left side, one sees the LaTeX code and on the right side, a preview of the document is automatically shown. With that convenient feature, it is easy to verify the resulting document. Whenever there is a problem with compiling the LaTeX code, it is shown when clicking on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Issues&lt;/code&gt; tab.&lt;/p&gt;

&lt;h3 id=&quot;sage-worksheets&quot;&gt;Sage Worksheets&lt;/h3&gt;
&lt;p&gt;The Sage worksheets and the Jupyter notebooks are built up by cells where each cell can either contain text or programming statements. These notebooks or worksheets are also known from other systems such as Maple or Mathematica.&lt;/p&gt;

&lt;h2 id=&quot;special-case-files&quot;&gt;Special Case Files&lt;/h2&gt;
&lt;p&gt;Terminals and folders are special cases of files. But really on a linux system they are also just files. Behind the scene of SMC, a project is just an account on a linux system. Hence when creating a new file of type &lt;code class=&quot;highlighter-rouge&quot;&gt;terminal&lt;/code&gt; a shell on a linux system is opened.&lt;/p&gt;

&lt;h2 id=&quot;teaching-with-smc&quot;&gt;Teaching With SMC&lt;/h2&gt;
&lt;p&gt;One of the above file types that can be created on SMC is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Course&lt;/code&gt;. This creates specialized infrastructure within a project which is helpful when teaching a course to students. In a companion post, these special features of SMC for teaching are going to be described.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Getting Started with Julia</title>
   <link href="http://charlotte-ngs.github.io//2015/04/13/GettingStartedWithJulia/"/>
   <updated>2015-04-13T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2015/04/13/GettingStartedWithJulia</id>
   <content type="html">&lt;h3 id=&quot;how-is-this-new-kid-on-the-block-called-julia&quot;&gt;How is this new kid on the block called “Julia”?&lt;/h3&gt;
&lt;p&gt;Julia is a relatively new language for numerical and statistical analysis. Julia can be used interactively using the provided interpreter in a so called “read-evaluate-print-loop” (repl). Julia functions are compiled using JIT compilation. This combines the advantages of fast interactive development and fast execution of compiled code.&lt;/p&gt;

&lt;h3 id=&quot;local-version&quot;&gt;Local version&lt;/h3&gt;
&lt;p&gt;Julia can be downloaded for free from http://julialang.org. It is either available as commandline tool run from a terminal or in an IDE called Juno. On the Mac installation of both Julia CLI and Juno worked without any problems. On windows there were a few firewall related issues which prevented Juno to connect to Julia.&lt;/p&gt;

&lt;h3 id=&quot;julia-in-the-cloud&quot;&gt;Julia in the cloud&lt;/h3&gt;
&lt;p&gt;A very convenient alternative to installing Julia or Juno on your local machine is to point your browser to http://juliabox.org, and either create an account or use your Google drive account. On juliabox one can either work with raw Julia text files or with iPython notebooks.&lt;/p&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;
&lt;p&gt;The syntax of Julia is comparable to Matlab or Python.&lt;/p&gt;

&lt;h3 id=&quot;a-first-example&quot;&gt;A first example&lt;/h3&gt;
&lt;p&gt;A first example of some simple Julia code is shown at: http://charlotte-ngs.github.io/GettingStartedWithJulia/FernandoGarrick2013Notes.html&lt;/p&gt;

&lt;p&gt;Enjoy!!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why R</title>
   <link href="http://charlotte-ngs.github.io//2015/02/03/WhyR/"/>
   <updated>2015-02-03T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2015/02/03/WhyR</id>
   <content type="html">&lt;p&gt;When I was writing a summary of a book chapter, I was a little disappointed how poorly the authors argued in favor of R. That is why I was adding my two most favorite arguments in favor of R. Those are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fast prototyping and&lt;/li&gt;
  &lt;li&gt;Good infrastructure and good integration of Literate Programming paradigms.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fast prototyping stands for the quick turn-over of ideas into code. That means once you have a dataset and you want to try some ideas or draw some graphics, this can be done very quickly in R. In a &lt;a href=&quot;https://www.youtube.com/watch?v=UZkaZhsOfT4&quot;&gt;Google Tech Talk&lt;/a&gt; Dirk Edelbuettel showed a nice example of what this really means. Got you interested, please &lt;a href=&quot;http://charlotte-ngs.github.io/WhyR/notes/20150203-WhyR.html&quot;&gt;read on …&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Suggested Improvements to Genome-Wide Association Studies and Genomic Prediction</title>
   <link href="http://charlotte-ngs.github.io//2015/01/27/SuggestedImprovementToGWH2013a/"/>
   <updated>2015-01-27T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2015/01/27/SuggestedImprovementToGWH2013a</id>
   <content type="html">&lt;p&gt;In Chapter 1 of ([@GWH2013a]; yet another green book) the authors Gondro, Porto-Neto and Lee very nicely outline the potential use of R for Genome Wide Association Studies (GWAS). In eight sections they cover topics from “Reading Data Into R” over “Loops and Vectorization”, “Byte-Code Compilation”, “Memory Management”, “Parallel Computation” to “Running Software from R”which explains how to run stand-alone software programs which are independent of R from inside the R interpreter. This first book chapter starts with an “Introduction” and closes with a “Notes” section.&lt;/p&gt;

&lt;p&gt;The introduction describes some aspects of R and gives pointers to resources which are valuable to users. Readers who are new to R are advised to first read an introductory text on R. Neither the system nor the language are introduced in this first chapter of the book. All the material presented in Chapter 1 of [@GWH2013a] requires an intermediate to advanced level of R-programming.&lt;/p&gt;

&lt;p&gt;Personally I believe the authors of this first chapter of [@GWH2013a] are missing on some important properties of R which to me and probably also to some other users seam to be very important. Let me just mention two of these properties which make me use R over any other system.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fast protoyping
Fast prototyping means that one can turn ideas very quickly into results. Hence the overhead between having an idea and coming up with a prototype program that produces the first results is very short in R.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reproducible research
In principle, the term reproducible research is almost a pleonasm like a round circle, because research should always be reproducible. But the term as it stands here has a more specific meaning. Reproducible research in the context of computational sciences means that algorithms and programs are explained in a natural language which is interspersed with statements from a programming language implementing the described algorithm. This approach is implemented using a technique called “literate programming”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a &lt;a href=&quot;http://charlotte-ngs.github.io/ImpGWH2013a/notes/ImpGWH2013a.html&quot;&gt;companion post&lt;/a&gt;, I am trying to summarize the first chapter of GWH2013a using a literate programming approach.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;[@GWH2013a] Gondro C, van der Werf J and Hayes B (2013). Genome-Wide Association Studies and Genomic Prediction. &lt;a href=&quot;http://www.springer.com/life+sciences/systems+biology+and+bioinformatics/book/978-1-62703-446-3&quot;&gt;Springer&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fixed Vs Random Effects In Statistical Modelling</title>
   <link href="http://charlotte-ngs.github.io//2015/01/19/FixedVsRandom/"/>
   <updated>2015-01-19T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2015/01/19/FixedVsRandom</id>
   <content type="html">&lt;h2 id=&quot;what-is-the-point&quot;&gt;What is the point?&lt;/h2&gt;
&lt;p&gt;Statistical modelling in a frequentist setting usually implies the distinction of the effects included in a certain model into either fixed effects or random effects. Naturally the question arises on how effects are separated into fixed and random, i.e., what are the definitions of fixed and random effects and based on that what are the criteria for assigning the labels fixed or random to any given effect.&lt;/p&gt;

&lt;h2 id=&quot;my-nave-answer&quot;&gt;My naïve answer&lt;/h2&gt;
&lt;p&gt;When getting asked the question on what are fixed or random effects, I ususally anser very naïvely in the following way. I learned that whenever a grouping factor is repeatable and all levels of a factor that are present in a population can be observed, the factor is determined to be a fixed effect. Examples are drug dosage in medical trials or gender effects in surveys. For random effects one typically only observes some samples out of a population like in incomplete block designs or split-plot experiments or in some models random effects are completely unobservable such as genetic effects in animal breeding models.&lt;/p&gt;

&lt;p&gt;With respect to parameter estimation, levels of fixed effects are typically estimated using least squares and for random effects some unbiased prediction methods are used.&lt;/p&gt;

&lt;h2 id=&quot;surprise-surprise&quot;&gt;Surprise, surprise&lt;/h2&gt;
&lt;p&gt;What I did not realize so far and what makes my above answer very naïve is the fact that the statistical community has not agreed on a unified definition on what fixed and random effects are, yet. A nice outline of the conceptual discrepancies of fixed and random effects is given on &lt;a href=&quot;http://andrewgelman.com/2005/01/25/why_i_dont_use/&quot;&gt;Andrew Gelman’s blog&lt;/a&gt; and in a paper that is referenced on the blog post. Here are the five definitions of fixed and random effects given on Gelman’s blog.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Fixed effects are constant accross individuals and random effects vary.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Effects are fixed if they are interesting in themselves or random if there is interest in the underlying population&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;When a sample exhausts the population, the corresponding variable is fixed; when the sample is a small part of the population the corresponding variable is random&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;If an effect is assumed to be a realized value of a random variable, it is called a random effect.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Fixed effects are estimated using least squares or more generally maximum likelihood. Random effects are estimated using shrinkage (“linear unbiased prediction”). This definition is standard in multilevel modelling and econometrics.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;definitions-are-different&quot;&gt;Definitions are different&lt;/h3&gt;
&lt;p&gt;Gelman also comments on the differences of the above definitions. The first definition stands apart from the other four. Under the second definition,  the assignment of fixed and random effects can change depending on what is of interest in a study. The third definition relates fixed and random effects to a finite population while the fourth makes not reference to any population at all. The second definition allows fixed effects to come from a distribution, as long as that distribution is not of any interest. The fourth and fifth definitions do not use and distribution for inference about fixed effects. The fifth definition has the virue of mathematical precision, but it does not determine when an effect is fixed and when it is random.&lt;/p&gt;

&lt;h2 id=&quot;want-some-more-definitions-&quot;&gt;Want Some More Definitions …&lt;/h2&gt;
&lt;p&gt;… here they come. What I have learned from researchers applying statistical models is yet another definition.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have this huge data set with these many effects and my statistics program cannot handle this many effects and levels so I have to treat them as random effects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the advent of big data and with genomics in particular, researchers are often forced to the following&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have more parameters than observations, hence I cannot treat them as fixed effects, but I am forced to model them as random.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;summary-and-side-note&quot;&gt;Summary and Side Note&lt;/h2&gt;
&lt;p&gt;The above shows that none of the definitions clearly determine when a modelling effect should be treated as fixed and when as random. Furthermore a given effect would be assigned to be fixed under certain definitions and random based on other definitions.&lt;/p&gt;

&lt;p&gt;Classification of modelling effects into fixed and random is clearly a frequentist concept. The above outline and the absence of clear-cut and unified definitions gives raise to a lot of critisism of frequentist modelling concepts.&lt;/p&gt;

&lt;p&gt;From a Bayesian perspective, the only relevant distinction is that between observable and non-observable quantities. Inferences on non-observable quantities are always based on posterior distributions of non-observables given observables. The definition of what is observable and not observable seams to leave much less room for interpretation of what we have just seen for the definition of fixed and random effects.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bash Script Documentation Using POD</title>
   <link href="http://charlotte-ngs.github.io//2015/01/09/BashScriptPOD/"/>
   <updated>2015-01-09T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2015/01/09/BashScriptPOD</id>
   <content type="html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POD&lt;/code&gt; stands for &lt;a href=&quot;http://en.wikipedia.org/wiki/Plain_Old_Documentation&quot;&gt;plain old documentation&lt;/a&gt; which is a simple markup format definition. Documentation on the scripting language &lt;a href=&quot;http://www.perl.org&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;perl&lt;/code&gt;&lt;/a&gt; is written in POD. The POD viewer that comes with perl is called &lt;a href=&quot;http://perldoc.perl.org&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;perldoc&lt;/code&gt;&lt;/a&gt;, hence any document in POD format can be viewed using perldoc which shows it as a man-page. In what follows, it is shown how documentation in POD format can be included in a bash script and how perldoc is used to show the script documentation as a man-page.&lt;/p&gt;

&lt;h2 id=&quot;divergence-dilemma&quot;&gt;Divergence Dilemma&lt;/h2&gt;
&lt;p&gt;Traditionally bash scripts are documented in separate manual files called &lt;code class=&quot;highlighter-rouge&quot;&gt;man-pages&lt;/code&gt;. While man-pages are well established among users and developers, they are showing a problem that is termed here the &lt;code class=&quot;highlighter-rouge&quot;&gt;divergence dilemma&lt;/code&gt;. With the term divergence I am referring to the danger that the source code and the documentation of a certain software program can get out of sync. That means the documentation is not exactly reflecting the features implemented in the source code.&lt;/p&gt;

&lt;h3 id=&quot;how-can-this-happen&quot;&gt;How can this happen?&lt;/h3&gt;
&lt;p&gt;Typically source code and documentation are not written in parallel but sequentially. First the source code is developed and later some documentation is added. Whenever bugs in the source code must be fixed or additional features are added, very often the documentation is not updated. Hence the documentation is no longer describing the current version of the source code, but still reflects the initial version of the software program.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fight-the-divergence-dilemma---literate-programming&quot;&gt;How To Fight The Divergence Dilemma - Literate Programming&lt;/h2&gt;
&lt;p&gt;Initiatives such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Literate_programming&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Literate Programming&lt;/code&gt;&lt;/a&gt; started by &lt;a href=&quot;http://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt; the author of &lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt; which became the basis of &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt; address the equivalent of the divergence dilemma in computational research.&lt;/p&gt;

&lt;p&gt;In Literate Programming the software program is given by an explanation of the algorithm or the program logic in a natural language like English, interspersed by macros and snippets of source code. It is important to note here that the documentation of the program and the source code are in the same file which helps avoiding the divergence dilemma.&lt;/p&gt;

&lt;h3 id=&quot;tools-implementing-literate-programming&quot;&gt;Tools implementing Literate Programming&lt;/h3&gt;
&lt;p&gt;The following table shows some of the tools that implement Literate Programming.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tool&lt;/th&gt;
      &lt;th&gt;Link&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NoWeb&lt;/td&gt;
      &lt;td&gt;https://www.cs.tufts.edu/~nr/noweb/&lt;/td&gt;
      &lt;td&gt;Implementation of original approach&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sweave&lt;/td&gt;
      &lt;td&gt;http://www.stat.uni-muenchen.de/~leisch/Sweave&lt;/td&gt;
      &lt;td&gt;R/S-version of noweb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Doxygen&lt;/td&gt;
      &lt;td&gt;http://www.doxygen.org&lt;/td&gt;
      &lt;td&gt;CplusPlus, Fortran, Java documenter&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;perldoc&lt;/td&gt;
      &lt;td&gt;http://www.perl.com&lt;/td&gt;
      &lt;td&gt;Perl type of manpages&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;porting-ideas-of-literate-programming-into-a-bash-script&quot;&gt;Porting ideas of Literate Programming into a bash script&lt;/h3&gt;
&lt;p&gt;While it is not possible to follow all premises of Literate Programming when documenting bash scripts, we can implement an improved strategy compared to the man-pages approach that helps avoiding the divergence dilemma.&lt;/p&gt;

&lt;p&gt;The approach proposed here is to combine documentation and source code of the same bash script in one file. Documentation and source code are in separate sections of the file and not interspersed as would be required by Literate Programming.&lt;/p&gt;

&lt;h2 id=&quot;an-example-script&quot;&gt;An Example Script&lt;/h2&gt;
&lt;p&gt;An example bash script together with its documentation is shown below. The two parts source code and documentation would be saved in the same file.&lt;/p&gt;

&lt;p&gt;```
#!/bin/sh
###
###
###
###   Purpose:   Create Plots for given Trait
###   started:   2015/01/05 (pvr)
###
### ######################################### ###&lt;/p&gt;

&lt;h1 id=&quot;set-script-name-variable&quot;&gt;Set Script Name variable&lt;/h1&gt;
&lt;p&gt;SCRIPT=&lt;code class=&quot;highlighter-rouge&quot;&gt;basename ${BASH_SOURCE[0]}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;r-program-and-r-script&quot;&gt;# R-program and R-script&lt;/h3&gt;
&lt;p&gt;RPROG=&lt;code class=&quot;highlighter-rouge&quot;&gt;which R&lt;/code&gt;
RSCRIPT=’R/plotLbeExportGrade.R’&lt;/p&gt;

&lt;h3 id=&quot;functions&quot;&gt;# functions&lt;/h3&gt;
&lt;p&gt;usage () {
  local l_MSG=$1
  echo “Usage Error: $l_MSG”
  echo “Usage: $SCRIPT -t &lt;string&gt;&quot;
  echo &quot;  where &lt;string&gt; specifies the trait name&quot;
  echo &quot;Recognized optional command line arguments&quot;
  echo &quot;-f &lt;string&gt;  -- Set name of input file with expert names&quot;
  echo &quot;-d &lt;string&gt;  -- Set name of input file with dates&quot;
  exit 1
}&lt;/string&gt;&lt;/string&gt;&lt;/string&gt;&lt;/string&gt;&lt;/p&gt;

&lt;h3 id=&quot;starting-main&quot;&gt;# starting main&lt;/h3&gt;
&lt;p&gt;echo  job starts
RIGHT_NOW=$(date +”%x %r %Z”)
echo $RIGHT_NOW&lt;/p&gt;

&lt;h3 id=&quot;check-number-of-command-line-arguments&quot;&gt;check number of command line arguments&lt;/h3&gt;
&lt;p&gt;NUMARGS=$#
echo “Number of arguments: $NUMARGS”
if [ $NUMARGS -eq 0 ]; then
  usage ‘No command line arguments specified’
fi&lt;/p&gt;

&lt;h3 id=&quot;start-getopts-code&quot;&gt;Start getopts code&lt;/h3&gt;
&lt;p&gt;#Parse command line flags
#If an option should be followed by an argument, it should be followed by a “:”.
#Notice there is no “:” after “h”. The leading “:” suppresses error messages from
#getopts. This is required to get my unrecognized option code to work.
while getopts :f:t:d: FLAG; do
  case $FLAG in
    t) # set option “t”
    TRAIT=$OPTARG
	  ;;
	f) # set option “f”
	  EXPERTNAMESFILE=$OPTARG
	  [ -f “${EXPERTNAMESFILE}” ] || usage “Expert name file: ${EXPERTNAMESFILE} NOT FOUND”
	  ;;
	d) # set option “d”
	  DATESFILE=$OPTARG
	  [ -f “${DATESFILE}” ] || usage “Dates period file: ${DATESFILE} NOT FOUND”
	  ;;
	*) # invalid command line arguments
	  usage “Invalid command line argument $OPTARG”
	  ;;
  esac
done&lt;/p&gt;

&lt;p&gt;shift $((OPTIND-1))  #This tells getopts to move on to the next argument.&lt;/p&gt;

&lt;h3 id=&quot;check-that-trait-is-not-empty&quot;&gt;# check that TRAIT is not empty&lt;/h3&gt;
&lt;p&gt;if [ -z “${TRAIT}” ]
then
  usage ‘Trait name must be specified using option -t &lt;string&gt;&#39;
fi&lt;/string&gt;&lt;/p&gt;

&lt;h3 id=&quot;put-together-assignment-of-r-variables-required-for-r-script&quot;&gt;# put together assignment of R-variables required for R-script&lt;/h3&gt;
&lt;p&gt;RVARS=”Trait &amp;lt;- ‘${TRAIT}’”
if [ ! -z “${EXPERTNAMESFILE}” ]
then
  RVARS=”${RVARS};sExpertNamesFile &amp;lt;- ‘${EXPERTNAMESFILE}’”
fi
if [ ! -z “${DATESFILE}” ]
then
  RVARS=”${RVARS};sDatesFile &amp;lt;- ‘${DATESFILE}’”
fi&lt;/p&gt;

&lt;h3 id=&quot;pass-command-line-arguments-and-r-script-to-r-program&quot;&gt;# pass command line arguments and R-script to R program&lt;/h3&gt;
&lt;p&gt;(echo $RVARS;cat $RSCRIPT) | $RPROG –vanilla –no-save&lt;/p&gt;

&lt;p&gt;RIGHT_NOW=$(date +”%x %r %Z”)
echo $RIGHT_NOW&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;echo end of job&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;«=cut
=pod&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;=head1 NAME&lt;/p&gt;

&lt;p&gt;erzeugePlotsV2.sh - Shell script generating LBE Plots&lt;/p&gt;

&lt;p&gt;=head1 SYNOPSIS&lt;/p&gt;

&lt;p&gt;erzeugePlotsV2.sh -t &lt;trait_name&gt;&lt;/trait_name&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  where: &amp;lt;trait_name&amp;gt; sets the name of the trait
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Recognized optional command line arguments
      -f &lt;string&gt;  -- Set name of input file with expert names
      -d &lt;string&gt;  -- Set name of input file with dates&lt;/string&gt;&lt;/string&gt;&lt;/p&gt;

&lt;p&gt;=head1 DESCRIPTION&lt;/p&gt;

&lt;p&gt;The above call generates LBE plots for the trait specified 
after option -t.&lt;/p&gt;

&lt;p&gt;=head2 Requirements&lt;/p&gt;

&lt;p&gt;Files specified after options -f and -d must exist, otherwise 
a usage message will be shown.&lt;/p&gt;

&lt;p&gt;=head1 LICENSE&lt;/p&gt;

&lt;p&gt;Artistic License 2.0 http://opensource.org/licenses/artistic-license-2.0&lt;/p&gt;

&lt;p&gt;=head1 AUTHOR&lt;/p&gt;

&lt;p&gt;Peter von Rohr &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#112;&amp;#101;&amp;#116;&amp;#101;&amp;#114;&amp;#046;&amp;#118;&amp;#111;&amp;#110;&amp;#114;&amp;#111;&amp;#104;&amp;#114;&amp;#064;&amp;#113;&amp;#117;&amp;#097;&amp;#108;&amp;#105;&amp;#116;&amp;#097;&amp;#115;&amp;#097;&amp;#103;&amp;#046;&amp;#099;&amp;#104;&quot;&gt;&amp;#112;&amp;#101;&amp;#116;&amp;#101;&amp;#114;&amp;#046;&amp;#118;&amp;#111;&amp;#110;&amp;#114;&amp;#111;&amp;#104;&amp;#114;&amp;#064;&amp;#113;&amp;#117;&amp;#097;&amp;#108;&amp;#105;&amp;#116;&amp;#097;&amp;#115;&amp;#097;&amp;#103;&amp;#046;&amp;#099;&amp;#104;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;=cut
```&lt;/p&gt;

&lt;p&gt;Once the source code and the script are saved in a file, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;perldoc&lt;/code&gt; with the name of the script file which then shows the documentation as a manpage. Since the documentation is written in &lt;code class=&quot;highlighter-rouge&quot;&gt;POD&lt;/code&gt; format, we can use all available converters of POD such as &lt;code class=&quot;highlighter-rouge&quot;&gt;pod2html&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pod2man&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;pod2text&lt;/code&gt;. The output of running &lt;code class=&quot;highlighter-rouge&quot;&gt;perldoc&lt;/code&gt; on the above script looks as follows.&lt;/p&gt;

&lt;p&gt;```
ERZEUGEPLOTSV2.SH(1)  User Contributed Perl Documentation ERZEUGEPLOTSV2.SH(1)&lt;/p&gt;

&lt;p&gt;NAME
          erzeugePlotsV2.sh - Shell script generating LBE Plots&lt;/p&gt;

&lt;p&gt;SYNOPSIS
          erzeugePlotsV2.sh -t &lt;trait_name&gt;&lt;/trait_name&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         where: &amp;lt;trait_name&amp;gt; sets the name of the trait

      Recognized optional command line arguments
         -f &amp;lt;string&amp;gt;  -- Set name of input file with expert names
         -d &amp;lt;string&amp;gt;  -- Set name of input file with dates
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DESCRIPTION
       The above call generates LBE plots for the trait specified after option
       -t.&lt;/p&gt;

&lt;p&gt;Requirements
       Files specified after options -f and -d must exist, otherwise a usage
       message will be shown.&lt;/p&gt;

&lt;p&gt;LICENSE
       Artistic License 2.0
       http://opensource.org/licenses/artistic-license-2.0&lt;/p&gt;

&lt;p&gt;AUTHOR
       Peter von Rohr &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#112;&amp;#101;&amp;#116;&amp;#101;&amp;#114;&amp;#046;&amp;#118;&amp;#111;&amp;#110;&amp;#114;&amp;#111;&amp;#104;&amp;#114;&amp;#064;&amp;#113;&amp;#117;&amp;#097;&amp;#108;&amp;#105;&amp;#116;&amp;#097;&amp;#115;&amp;#097;&amp;#103;&amp;#046;&amp;#099;&amp;#104;&quot;&gt;&amp;#112;&amp;#101;&amp;#116;&amp;#101;&amp;#114;&amp;#046;&amp;#118;&amp;#111;&amp;#110;&amp;#114;&amp;#111;&amp;#104;&amp;#114;&amp;#064;&amp;#113;&amp;#117;&amp;#097;&amp;#108;&amp;#105;&amp;#116;&amp;#097;&amp;#115;&amp;#097;&amp;#103;&amp;#046;&amp;#099;&amp;#104;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;perl v5.14.4                      2015-01-13              ERZEUGEPLOTSV2.SH(1)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Command Line Options For Bash Scripts</title>
   <link href="http://charlotte-ngs.github.io//2015/01/06/BashCommandLineArgs/"/>
   <updated>2015-01-06T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2015/01/06/BashCommandLineArgs</id>
   <content type="html">&lt;h2 id=&quot;the-ugly-past&quot;&gt;The Ugly Past&lt;/h2&gt;
&lt;p&gt;Until recently when I wanted to pass command line arguments to a bash script, I included some ugly &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements checking the number of command line arguments passed and assigning those arguments in a fixed order. Every bash script had at the beginning something that looked as follows&lt;/p&gt;

&lt;p&gt;```
…
### # functions
usage () {
  local l_MSG=$1
  echo “Usage Error: $l_MSG”
  echo “Usage: $0 Logfile-stem”
  exit 1
}&lt;/p&gt;

&lt;p&gt;…
### # command line args
if [ $#1 -lt 1 ];then
  usage “WRONG number of command line arguments”
fi
LOGFILESTEM=$1&lt;/p&gt;

&lt;p&gt;if [ $#1 -gt 1 ];then
  SLEEPSEC=$2
fi
…
```&lt;/p&gt;

&lt;p&gt;Apart from being not very good coding style it is also extremely error prone. The assignment of command line arguments to script-internal variables depends entirely on the order in which the command line arguments are specified. Switching the order of command line arguments leads to a complete mess in script-variable assignment. Furthermore all command line arguments but the last are absolutely mandatory.&lt;/p&gt;

&lt;p&gt;Hence there is a big need for improvement in how command line arguments are parsed in bash scripts.&lt;/p&gt;

&lt;h2 id=&quot;the-bright-new-world-with-bash-getopts&quot;&gt;The Bright New World with bash getopts&lt;/h2&gt;
&lt;p&gt;Searching the web showed two possible solutions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getopt&lt;/code&gt; which seams to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; library&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; which is a bash builtin function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Without comparing the two options and without any arguments, I found the second option to be easier. In what follows I am using the approach shown in an &lt;a href=&quot;http://tuxtweaks.com/2014/05/bash-getopts&quot;&gt;example script&lt;/a&gt; for parsing command line arguments with getopts in one of my scripts that is used to start an R-script (not shown here) to retrieve data from a database and to do some plots.&lt;/p&gt;

&lt;h2 id=&quot;own-example&quot;&gt;Own Example&lt;/h2&gt;
&lt;p&gt;Before using &lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; the script was parsing command line arguments in a very tedious way.&lt;/p&gt;

&lt;h3 id=&quot;the-old-way&quot;&gt;The Old Way&lt;/h3&gt;

&lt;p&gt;```
#!/bin/sh
###
###
###
###   Purpose:   Create Plots for given Trait
###   started:   2015/01/05 (pvr)
###
### ######################################### ###&lt;/p&gt;

&lt;p&gt;RPROG=&lt;code class=&quot;highlighter-rouge&quot;&gt;which R&lt;/code&gt;
RSCRIPT=’R/plotLbeExportGrade.R’&lt;/p&gt;

&lt;h3 id=&quot;functions&quot;&gt;# functions&lt;/h3&gt;
&lt;p&gt;usage () {
  local l_MSG=$1
  echo “Usage Error: $l_MSG”
  echo “Usage: $0 TraitName”
  exit 1
}&lt;/p&gt;

&lt;h3 id=&quot;starting-main&quot;&gt;# starting main&lt;/h3&gt;
&lt;p&gt;echo  job starts
RIGHT_NOW=$(date +”%x %r %Z”)
echo $RIGHT_NOW&lt;/p&gt;

&lt;h3 id=&quot;check-number-of-command-line-arguments&quot;&gt;check number of command line arguments&lt;/h3&gt;
&lt;p&gt;if [ $# -lt 1 ]
then
  usage “Incorrect number of commandline arguments”
fi&lt;/p&gt;

&lt;h3 id=&quot;assume-trait-is-first-command-line-argument&quot;&gt;# assume trait is first command line argument&lt;/h3&gt;
&lt;p&gt;TRAIT=$1&lt;/p&gt;

&lt;h3 id=&quot;more-command-line-parameters&quot;&gt;# more command line parameters&lt;/h3&gt;
&lt;p&gt;if [ $# -gt 1 ]
then
  EXPERTNAMESFILE=$2
  (echo “sExpertNamesFile &amp;lt;- ‘${EXPERTNAMESFILE}’;Trait &amp;lt;- ‘${TRAIT}’“;cat $RSCRIPT) | $RPROG –vanilla –no-save
else
  (echo “Trait &amp;lt;- ‘${TRAIT}’“;cat $RSCRIPT) | $RPROG –vanilla –no-save
fi&lt;/p&gt;

&lt;p&gt;RIGHT_NOW=$(date +”%x %r %Z”)
echo $RIGHT_NOW&lt;/p&gt;

&lt;p&gt;echo end of job
```&lt;/p&gt;

&lt;h3 id=&quot;using-getopts&quot;&gt;Using getopts&lt;/h3&gt;
&lt;p&gt;The same script using &lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; for command line parsing is shown below. The &lt;code class=&quot;highlighter-rouge&quot;&gt;usage&lt;/code&gt; function was extended to point to the changed format of how to specifiy command line arguments.&lt;/p&gt;

&lt;p&gt;The whole command line parsing happens in the &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;-loop. After &lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; the list of recognized flags is listed. A colon after a flag indicates that the flag requires a value to be specified. The first colon tells &lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; to not show any error messages.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;-loop calls &lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; for each command line argument and for each argument it stores the flag in variable &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAG&lt;/code&gt; and the value behind each flag in variable &lt;code class=&quot;highlighter-rouge&quot;&gt;OPTARG&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;FLAG&lt;/code&gt; is then differentiated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; switches where values are assigned into different variables.&lt;/p&gt;

&lt;p&gt;```
#!/bin/sh
###
###
###
###   Purpose:   Create Plots for given Trait
###   started:   2015/01/05 (pvr)
###
### ######################################### ###&lt;/p&gt;

&lt;h1 id=&quot;set-script-name-variable&quot;&gt;Set Script Name variable&lt;/h1&gt;
&lt;p&gt;SCRIPT=&lt;code class=&quot;highlighter-rouge&quot;&gt;basename ${BASH_SOURCE[0]}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;r-program-and-r-script&quot;&gt;# R-program and R-script&lt;/h3&gt;
&lt;p&gt;RPROG=&lt;code class=&quot;highlighter-rouge&quot;&gt;which R&lt;/code&gt;
RSCRIPT=’R/plotLbeExportGrade.R’&lt;/p&gt;

&lt;h3 id=&quot;functions-1&quot;&gt;# functions&lt;/h3&gt;
&lt;p&gt;usage () {
  local l_MSG=$1
  echo “Usage Error: $l_MSG”
  echo “Usage: $SCRIPT -t &lt;string&gt;&quot;
  echo &quot;  where &lt;string&gt; specifies the trait name&quot;
  echo &quot;Recognized optional command line arguments&quot;
  echo &quot;-f &lt;string&gt;  -- Set name of input file with expert names&quot;
  echo &quot;-d &lt;string&gt;  -- Set name of input file with dates&quot;
  exit 1
}&lt;/string&gt;&lt;/string&gt;&lt;/string&gt;&lt;/string&gt;&lt;/p&gt;

&lt;h3 id=&quot;starting-main-1&quot;&gt;# starting main&lt;/h3&gt;
&lt;p&gt;echo  job starts
RIGHT_NOW=$(date +”%x %r %Z”)
echo $RIGHT_NOW&lt;/p&gt;

&lt;h3 id=&quot;check-number-of-command-line-arguments-1&quot;&gt;check number of command line arguments&lt;/h3&gt;
&lt;p&gt;NUMARGS=$#
echo “Number of arguments: $NUMARGS”
if [ $NUMARGS -eq 0 ]; then
  usage ‘No command line arguments specified’
fi&lt;/p&gt;

&lt;h3 id=&quot;start-getopts-code&quot;&gt;Start getopts code&lt;/h3&gt;
&lt;p&gt;#Parse command line flags
#If an option should be followed by an argument, it should be followed by a “:”.
#The leading “:” suppresses error messages from
#getopts. This is required to get my unrecognized option code to work.
while getopts :f:t:d: FLAG; do
  case $FLAG in
    t) # set option “t” specifying the trait
    TRAIT=$OPTARG
	  ;;
	f) # set option “f”
	  EXPERTNAMESFILE=$OPTARG
    # EXPERTNAMESFILE must exist
    [ -f “${EXPERTNAMESFILE}” ] || usage “Expertname file: ${EXPERTNAMESFILE} NOT FOUND”
	  ;;
	d) # set option “d”
	  DATESFILE=$OPTARG
    # DATESFILE must exist
    [ -f “${DATESFILE}” ] || usage “Dates file: ${DATESFILE} NOT FOUND”
	  ;;
	*) # invalid command line arguments
	  usage “Invalid command line argument $OPTARG”
	  ;;
  esac
done&lt;/p&gt;

&lt;p&gt;shift $((OPTIND-1))  #This tells getopts to move on to the next argument.&lt;/p&gt;

&lt;h3 id=&quot;check-that-trait-is-not-empty&quot;&gt;# check that TRAIT is not empty&lt;/h3&gt;
&lt;p&gt;if [ -z “${TRAIT}” ]
then
  usage ‘Trait name must be specified using option -t &lt;string&gt;&#39;
fi&lt;/string&gt;&lt;/p&gt;

&lt;h3 id=&quot;put-together-assignment-of-r-variables-required-for-r-script&quot;&gt;# put together assignment of R-variables required for R-script&lt;/h3&gt;
&lt;p&gt;RVARS=”Trait &amp;lt;- ‘${TRAIT}’”
if [ ! -z “${EXPERTNAMESFILE}” ]
then
  RVARS=”${RVARS};sExpertNamesFile &amp;lt;- ‘${EXPERTNAMESFILE}’”
fi
if [ ! -z “${DATESFILE}” ]
then
  RVARS=”${RVARS};sDatesFile &amp;lt;- ‘${DATESFILE}’”
fi&lt;/p&gt;

&lt;h3 id=&quot;pass-command-line-arguments-and-r-script-to-r-program&quot;&gt;# pass command line arguments and R-script to R program&lt;/h3&gt;
&lt;p&gt;(echo $RVARS;cat $RSCRIPT) | $RPROG –vanilla –no-save&lt;/p&gt;

&lt;p&gt;RIGHT_NOW=$(date +”%x %r %Z”)
echo $RIGHT_NOW
echo end of job
```&lt;/p&gt;

&lt;h3 id=&quot;example-calls&quot;&gt;Example calls&lt;/h3&gt;
&lt;p&gt;Calling the script without any command line arguments shows the usage message.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ ./bash/erzeugePlotsV2.sh
job starts
06.01.2015 04:31:46 CET
Number of arguments: 0
Usage Error: No command line arguments specified
Usage: erzeugePlotsV2.sh -t &amp;lt;string&amp;gt;
  where &amp;lt;string&amp;gt; specifies the trait name
Recognized optional command line arguments
-f &amp;lt;string&amp;gt;  -- Set name of input file with expert names
-d &amp;lt;string&amp;gt;  -- Set name of input file with dates
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A call with the minimum number of command line arguments is shown below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
./bash/erzeugePlotsV2.sh -t DLC_FO8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Specifying all command line arguments looks as follows&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
./bash/erzeugePlotsV2.sh -t DLC_FO8 -f input/experts.csv -d input/dates.csv
&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Multiple Linear Regression In R</title>
   <link href="http://charlotte-ngs.github.io//2014/11/24/MultipleRegressionInR/"/>
   <updated>2014-11-24T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2014/11/24/MultipleRegressionInR</id>
   <content type="html">&lt;p&gt;At the time I was putting together some slides on an &lt;a href=&quot;http://charlotte-ngs.github.io/RCrashCourse&quot;&gt;introduction to R&lt;/a&gt;, I wanted to integrate something very basic about linear modelling. But very soon I realized that this would be too much material for one series of slides. Hence I decided to put away the material on linear models for a separate post and a new series of slides.&lt;/p&gt;

&lt;p&gt;The introduction to multiple linear regression comes in two versions. First, an example analysis of the Chatterjee–Price Attitude dataset is described in a &lt;a href=&quot;http://charlotte-ngs.github.io/MultLinRegInR/notes/2014-11-04-MultipleRegressionInR.html&quot;&gt;blog post&lt;/a&gt;. Second, the same material is also presented as a &lt;a href=&quot;http://charlotte-ngs.github.io/MultLinRegInR/slides/MultLinRegInR.html&quot;&gt;series of slides&lt;/a&gt; which can freely be used for courses or presentations.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;The description of the multiple linear regression analysis is based on a course on Computational Statistics taught by Martin Mächler and Peter Bühlmann at ETH Zurich. The &lt;a href=&quot;http://stat.ethz.ch/education/semesters/ss2014/CompStat&quot;&gt;course notes&lt;/a&gt; contain more topics than just multiple linear regression and are certainly worth while having a look at. I want to thank both authors for this course and for sharing their course notes online.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Update Mac Os X to Yosemite</title>
   <link href="http://charlotte-ngs.github.io//2014/10/27/UpdateYosemite/"/>
   <updated>2014-10-27T00:00:00+01:00</updated>
   <id>http://charlotte-ngs.github.io/2014/10/27/UpdateYosemite</id>
   <content type="html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;All those who want to stay on the safe side and hate to work around issues and new features, are best advised to wait with an upgrade to Yosemite. Also for production systems, an upgrade is probably still a bit early. Unlike with the previous upgrade to Mac Os X 10.9, no real performance boost is perceived when upgading to &lt;code class=&quot;highlighter-rouge&quot;&gt;Yosemite&lt;/code&gt;. Although one has to admit that all the points mentioned here against the upgrade are nowhere near the nightmare of an upgrade from Windows 7 to 8.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;Before one upgrades a whole operating system, a complete backup of user data is an absolute must. Mac Os X has a backup utility called TimeMachine which comes for free with the system. All one has to do is connect an external hard-drive and start a backup using Time Machine by clicking on the following icon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2014-10-27-UpdateYosemite/TimeMachine.png&quot; alt=&quot;Time Machine&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;p&gt;Last weekend I decided to upgrade Mac Os X on my Mac Book to version 10.10 aka &lt;code class=&quot;highlighter-rouge&quot;&gt;Yosemite&lt;/code&gt;. The upgrade process is started from the AppStore. When you open the AppStore there is a big banner with the Yosemite Logo and a small Update button. Whenever you click on that button the download starts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2014-10-27-UpdateYosemite/AppStoreYosemite.png&quot; alt=&quot;Yosemite Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It took more than three hours to download which is most likely caused by my very slow connection to the internet at home. In total, the upgrade to Yosemite is worth 5.16 GB of data.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Once the download was completed the installation of the upgrade can be started from the Download folder. I have not followed the installation closely, but it took quite a long time and several restarts were required. The whole installation did not require any intervention from the user side. In case somebody is interested in more details, one cat press Command-L which is supposed to show more details about the progress of the installation. The timings shown during the installation were not very accurate. For about half an hour the installation screen was showing the message &lt;code class=&quot;highlighter-rouge&quot;&gt;2 minutes left ...&lt;/code&gt;. It seams that the upgrade utility is copying parts of the user data or installed software to a secure place and that can take a lot of time depending on how much data has to be copied.&lt;/p&gt;

&lt;h2 id=&quot;aftermath&quot;&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;The whole upgrade process went very smoothly. The default desktop background changed and the dock looks different but appart from that no obvious changes. When maximizing a window using the green dot in the top-left corner, the window is shown in a full-screen mode. This full-screen mode can be terminated by pointing the cursor to the top border of the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2014-10-27-UpdateYosemite/RedYellowGreenDots.png&quot; alt=&quot;RedYellowGreenDots&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;path-issue&quot;&gt;Path Issue&lt;/h3&gt;
&lt;p&gt;In a &lt;a href=&quot;http://tex.stackexchange.com/questions/208181/why-did-my-tex-related-gui-program-stop-working-in-mac-os-x-yosemite&quot;&gt;post on tex.stackexchange.com&lt;/a&gt;, Adam Maxwell mentioned that GUI programs using TEX tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;pdflatex&lt;/code&gt; stopped working after upgrading to Yosemite. In the background section of the post the author explains that GUI programs do no longer inherit variables from shell init files like .bash_profile, .bashrc or others.&lt;/p&gt;

&lt;p&gt;For RStudio this meant that when creating a new Sweave document, RStudio would put up the message that it cannot find any TeX installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2014-10-27-UpdateYosemite/NoTeXInstallationRStudio.png&quot; alt=&quot;No TeX Installation in RStudio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When trying to compile, the unsurprising error message appears in the Compile PDF console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://charlotte-ngs.github.io/img/2014-10-27-UpdateYosemite/PdflatexErrorMessage.png&quot; alt=&quot;Pdflatex Error Message&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fix-for-rstudio&quot;&gt;Fix for RStudio&lt;/h3&gt;
&lt;p&gt;Shortly after the post by Adam Maxwell there were posts appearing on &lt;a href=&quot;http://www.r-bloggers.com/r-and-rstudio-incompatibility-with-yosemite-mac-os-x-10-10/?utm_source=feedburner&amp;amp;utm_medium=email&amp;amp;utm_campaign=Feed%3A+RBloggers+%28R+bloggers%29&quot;&gt;Rbloggers&lt;/a&gt; and the &lt;a href=&quot;https://support.rstudio.com/hc/en-us/articles/203815576-RStudio-PATH-problems-with-OS-X-Yosemite&quot;&gt;RStudio web-site&lt;/a&gt; announcing that the latest version (Version 0.98.1083) of RStudio would fix the path problem. After installing that latest version, no more messages of missing TeX installations and compiling Sweave documents worked again.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction To Dplyr</title>
   <link href="http://charlotte-ngs.github.io//2014/10/22/IntroductionToDplyr/"/>
   <updated>2014-10-22T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2014/10/22/IntroductionToDplyr</id>
   <content type="html">&lt;h2 id=&quot;before-dplyr&quot;&gt;Before dplyr&lt;/h2&gt;
&lt;p&gt;The R-package &lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; represents an important milestone in the history of R. Before &lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; existed, data manipulation was not considered to be a strong point of the R system. I even remember very vaguely that even John Chambers was advocating in one of his talks many years ago, that data preparation is better done by some scripting language, like python or perl.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it-all-about&quot;&gt;What is it all about&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; can be understood as a language of data manipulation. The language consists only of a small number of verbs each designed to perform a well defined task. Each of the verbs is implemented in an R function. Data manipulation processes can be constructed by chaining together sequences of verbs to a pipeline.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://charlotte-ngs.github.io/dplyrIntro&quot;&gt;Introductory slides&lt;/a&gt; show the basic usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; using Andersons Iris data set.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; package is available through CRAN, hence &lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; can be installed via&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
install.packages(&quot;dplyr&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The introductory vignette to &lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; available through&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r
browseVignettes(package = &quot;dplyr&quot;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;demonstrates the application of &lt;code class=&quot;highlighter-rouge&quot;&gt;dplyr&lt;/code&gt; to the New York City airport flights dataset.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Introduction to R</title>
   <link href="http://charlotte-ngs.github.io//2014/10/14/IntroductionToR/"/>
   <updated>2014-10-14T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2014/10/14/IntroductionToR</id>
   <content type="html">&lt;p&gt;When working with big data which is certainly the case in the area of
next generation sequencing (NGS), it is important to have a set of tools 
or a system that supports the user in managing and analysing the available 
data.&lt;/p&gt;

&lt;h2 id=&quot;the-r-system&quot;&gt;The R System&lt;/h2&gt;
&lt;p&gt;In statistical data analysis &lt;a href=&quot;http://www.r-project.org&quot;&gt;R&lt;/a&gt; has become very 
popular. The philosophy of R is similar to the one of Unix of building a system 
using small tools. Hence the base of R is relatively small. But that small base 
can easily be extended by a large number of packages. The Comprehensive R Archive 
Network &lt;a href=&quot;http://cran.r-project.org/&quot;&gt;CRAN&lt;/a&gt; is the main repository for packages 
extending the functionality of the R system.&lt;/p&gt;

&lt;h2 id=&quot;bioconductor&quot;&gt;Bioconductor&lt;/h2&gt;
&lt;p&gt;When working with data from Bio- or Life-Sciences, &lt;a href=&quot;http://www.bioconductor.org&quot;&gt;Bioconductor&lt;/a&gt; 
is a very valuable resource. Bioconductor does not only provide a large set of 
R packages but it does also offer standardized workflows and example datasets. 
In general Bioconductor documentation is provided by vignettes following the 
paradigm of reproducible research.&lt;/p&gt;

&lt;h2 id=&quot;why-r&quot;&gt;Why R&lt;/h2&gt;
&lt;p&gt;Because first of all R is very fast in prototyping and second R is easy to extend 
either by writing packages in R or by using its interfaces to other languages.&lt;/p&gt;

&lt;p&gt;Dirk Edelbuettel explained why to use R in a &lt;a href=&quot;https://www.youtube.com/watch?v=UZkaZhsOfT4&quot;&gt;Google Tech Talk&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;r-crash-course&quot;&gt;R Crash Course&lt;/h2&gt;
&lt;p&gt;Learning how to use a system like R is associated with a certain learning curve. 
Some people pretend that this curve is especially steep when learning how to use R.&lt;/p&gt;

&lt;p&gt;As an introduction, I have put together some slides which I would use to introduce 
R to an audience without prior knowledge. In case you are interested you can &lt;a href=&quot;http://charlotte-ngs.github.io/RCrashCourse&quot;&gt;read more 
here …&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How To Get Started</title>
   <link href="http://charlotte-ngs.github.io//2014/08/20/how-to-get-started/"/>
   <updated>2014-08-20T00:00:00+02:00</updated>
   <id>http://charlotte-ngs.github.io/2014/08/20/how-to-get-started</id>
   <content type="html">&lt;p&gt;Most Blogs start by a report on how to get started with blogging. This blog should not be any different. Not that it is particularly interesting, but maybe someone else out there has the same difficulties that I had and maybe these lines can help getting over those difficulties a little faster.&lt;/p&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;Before coming here I started a blog using &lt;a href=&quot;http://www.evernote.com&quot;&gt;Evernote&lt;/a&gt; linked to &lt;a href=&quot;http://postach.io&quot;&gt;Postach.io&lt;/a&gt;. This was very convenient, because I use Evernote on a daily basis. When writing a post about programming concepts, I want to follow the paradigm of reproducible research or reproducible programming, i.e., no copy-pasting of code and results. Everything is produced by one single source file. At the time when I got started with my Evernote blog I did not see how to implement the strategy of reproducible programming.&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;p&gt;As mentioned above, the goal for my ideal blogging environment was to write one source file with everything and then have some clever system produce all the output that was desired. I was reading some blog posts about blogging like a hacker &lt;code class=&quot;highlighter-rouge&quot;&gt;reference needed here&lt;/code&gt; and thereby I found using GitHub pages was what I wanted.&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;GitHub&lt;/h2&gt;
&lt;p&gt;GitHub offers free hosting of custom web-sites through GitHub pages. All one has to do is&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create an account on GitHub and&lt;/li&gt;
  &lt;li&gt;within that account create a repository called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;&lt;/code&gt; is to be replaced by the actual username you chose for the GitHub account.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After these two steps, your blog web-site is available at &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h2&gt;
&lt;p&gt;Jekyll is a blog-aware static site generator which means documents in Markdown format are automatically conterted into static HTML pages. Furthermore, running Jekyll on your local machine gives you the possibility to serve every page locally without having to upload anything.&lt;/p&gt;

&lt;h2 id=&quot;poole&quot;&gt;Poole&lt;/h2&gt;
&lt;p&gt;Poole provides an example setup for a Jekyll site. It comes with a set of templates, pages, styles and posts. This is very convenient for any beginner, because all one has to do is clone the sources provided by Poole, change the content to its own site and a new blog-site is ready to be served in only a very short time.&lt;/p&gt;

</content>
 </entry>
 

</feed>
