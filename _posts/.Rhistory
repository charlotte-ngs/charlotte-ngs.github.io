#        of input
#        plInputData - list describing input data
# returns: List of input fields with column headers
#          as field names
# ################################################ #
# initialize result list
lResultLine <- list()
# extract fields from list plInputData
sColHeader <- plInputData$colHeader
sColFormat <- plInputData$colFormat
# input string is split at one or more white spaces and converted into a vector
vecCurrentLine <- unlist(strsplit(psCurrentLine, "[\t ]+"))
# convert vecCurrentLine into a list, names are taken from sColHeader
# length of vecCurrentLine must match length of sColHeader
nLenVecCurrentLine <- length(vecCurrentLine)
stopifnot(nLenVecCurrentLine == length(sColHeader))
# loop over elements and build the list
for (lidx in seq_len(nLenVecCurrentLine)) {
lResultLine[[sColHeader[lidx]]] <- ifelse(sColFormat[lidx] == "numeric",
as.numeric(vecCurrentLine[lidx]),
vecCurrentLine[lidx])
}
return(lResultLine)
}
outputLine <- function(pnIdx, plCurrentLine) {
# outputLine(pnIdx, psColHeader, plCurrentLine): output information
#    about Line pnIdx stored plCurrentLine
# ################################################### ###
cat("Line ", pnIdx)
for (cCol in names(plCurrentLine))
cat(":", cCol, plCurrentLine[[cCol]])
cat("\n")
}
addRecContrib <- function(plWindow, plCurrentLine) {
# addRecContrib(plWindow, plCurrentLine): adding coverage
#   contribution of part of record plCurrentLine that falls
#   into plWindow to weighted average of plWindow.
#   Return a new window with updated weighted average
# ############################################################## #
# initialize result window to the window passed as an argument
lResultWindow <- plWindow
# contribution corresponds to the part of the record that falls
# w/in plWindow times the record coverage divided by the window size
startPos <- max(plWindow$startPos, plCurrentLine$startPos)
endPos <- min(plWindow$endPos, plCurrentLine$endPos)
lResultWindow$weAvCov <- lResultWindow$weAvCov +
(endPos - startPos + 1) * plCurrentLine$cov /
(plWindow$endPos - plWindow$startPos + 1)
return(lResultWindow)
}
outputWindow <- function(plWindow, psOutFile) {
# outputWindow(plWindow): prints window number
#   and weighted average stored in plWindow
# ############################################ #
nWindowNr <- plWindow$endPos / (plWindow$endPos - plWindow$startPos + 1)
cat(plWindow$chr, " Window ", nWindowNr, ": ", plWindow$weAvCov, "\n",
file = psOutFile, append = TRUE)
}
getNextWindow <- function(plWindow) {
# getNextWindow(lWindow) moves positions to the next
#   window and sets weAvCov to 0, chr is the same
#   as in plWindow
# ################################################## #
lResultWindow <- list()
nWindowSize <- (plWindow$endPos - plWindow$startPos + 1)
lResultWindow$startPos <- plWindow$endPos + 1
lResultWindow$endPos <- plWindow$endPos + nWindowSize
lResultWindow$weAvCov <- 0
lResultWindow$chr <- plWindow$chr
return(lResultWindow)
}
sTestFn <- "CovTestRec.txt"
lTestRec <- list(chr = "chr1", startPos = c(1,24,33,37), endPos = c(23,32,36,45),
cov = c(5,12,23,4))
nRec <- length(lTestRec$startPos)
# delete any old remaining files
if (file.exists(sTestFn)) {
unlink(sTestFn)
}
#cat("chr startPos endPos cov\n", file = sTestFn)
for (i in seq_len(nRec)) {
cat(lTestRec$chr, " ", lTestRec$startPos[i], " ", lTestRec$endPos[i], " ",
lTestRec$cov[i],"\n", file = sTestFn, append = TRUE)
}
nWindowSize <- 10
sColHeader <- c("chr", "startPos", "endPos", "cov")
sColFormat <- c("char", "numeric", "numeric", "numeric")
lInputData <- list(fileName = sTestFn, colHeader = sColHeader, colFormat = sColFormat)
lWeAvCov <- getWeAvCoverage(lInputData, nWindowSize)
cat("Weighted average coverage values: ", lWeAvCov$chr1, "\n")
nWindowSize <- 10
nNrPrintLines
nNrPrintLines <- 10
lIdx <- 1
sFileName <- "CovTestRec.txt"
nNrLines <- nGetNrInputLines(sFileName)
lIdx %% (floor(nNrLines/nNrPrintLines))
floor(nNrLines/nNrPrintLines)
floor(nNrLines/nNrPrintLines)+1
lIdx %% (floor(nNrLines/nNrPrintLines)+1)
?ifelse
library()
library(SRAdb)
browseVignette("SRAdb")
browseVignettes("SRAdb")
v1 <- vignettes("SRAdb")
v1 <- vignette("SRAdb")
print(v1)
edit(v1)
edit(v1)
v1
str(v1)
edit(v1$file)
source("http://bioconductor.org/biocLite.R")
biocLite("ShortRead")
library(ShortRead)
browseVignettes("ShortRead")
source("http://bioconductor.org/biocLite.R")
biocLite("Rsubread")
biocLite("SeqArray")
??readFastq
library(Biostrings)
?alphabetFrequency
class?GappedAlignment
class?GappedAlignments
library(GenomicRanges)
genes <- GRanges(seqnames=c("3R", "X"),
ranges=IRanges(
start=c(19967117, 18962306),
end=c(19973212, 18962925)),
strand=c("+", "-"), seqlengths=c(`3R`=27905053L, `X`=22422827L))
genes
seqnames(genes)
summary(genes)
sqrt(4)
sqrt(-1)
as.complex(sqrt(-1))
data(faithful)
xx <- faithful$eruptions
fit1 <- density(xx)fit2 <- replicate(10000, {  x <- sample(xx,replace=TRUE);  density(x, from=min(fit1$x), to=max(fit1$x))$y})fit3 <- apply(fit2, 1, quantile,c(0.025,0.975))plot(fit1, ylim=range(fit3))polygon(c(fit1$x,rev(fit1$x)),          c(fit3[1,], rev(fit3[2,])),          col=’grey’, border=F)lines(fit1)
fit2 <- replicate(10000, {  x <- sample(xx,replace=TRUE);  density(x, from=min(fit1$x), to=max(fit1$x))$y})
fit1 <- density(xx)
fit2 <- replicate(10000, {  x <- sample(xx,replace=TRUE);  density(x, from=min(fit1$x), to=max(fit1$x))$y})
fit2 <- replicate(10000, {  x <- sample(xx,replace=TRUE);  density(x, from=min(fit1$x), to=max(fit1$x))$y})
xx <- faithful$eruptionsfit1 <- density(xx)
xx <- faithful$eruptions
fit1 <- density(xx)
fit2 <- replicate(10000, {  x <- sample(xx,replace=TRUE);  density(x, from=min(fit1$x), to=max(fit1$x))$y})
fit2 <- replicate(10000, {x <- sample(xx,replace=TRUE);density(x, from=min(fit1$x), to=max(fit1$x))$y})
fit3 <- apply(fit2, 1, quantile,c(0.025,0.975))
plot(fit1, ylim=range(fit3))
polygon(c(fit1$x,rev(fit1$x)),c(fit3[1,], rev(fit3[2,])),col=’grey’, border=F)
polygon(c(fit1$x,rev(fit1$x)),c(fit3[1,], rev(fit3[2,])),col="grey", border=F)
lines(fit1)
?rev
?polygon
fit1$x
rev(fit1$x)
fit1
fit3
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
dev.off()
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
dev.off()
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
+         col = c("red", "blue"),
+         border = c("green", "yellow"),
+         lwd = 3, lty = c("dashed", "solid"))
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
+         col = c("red", "blue"),
+         border = c("green", "yellow"),
+         lwd = 3, lty = c("dashed", "solid"))
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
1:9
c(2,1,2,1,NA,2,1,2,1)
polygon(1:9, c(2,1,2,1,1.5,2,1,2,1),
+         col = c("red", "blue"),
+         border = c("green", "yellow"),
+         lwd = 3, lty = c("dashed", "solid"))
dev.off()
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
density = c(10, 20), angle = c(-45, 45))
library(Rcpp)
install.packages("rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
?cxxfunction
??cxxfunction
library(inline)
install.packages("inline")
library(inline)
?cxxfunction
fibRiter <- function(n) {
###
###   fibRiter(n): compute n-th Fibonacci number
###      using a linear/iterative approach w/out
###      recursion or memoization
### ######################################## ###
### # initialization
first <- 0
second  <- 1
third  <- 0
for (i in seq_len(n)) {
third <- first + second
first <- second
second <- third
}
return(first)
}
### # testing fibRiter
unix.time(fibRiter(5))
fibRiter(5)
fibRiter(15)
fibRiter(3)
fibRiter(27)
unix.time(fibResult <- fibRiter(25))
cat("*** fibRiter => fibResult: ", fibResult, "\n")
system.time(fibResult <- fibRiter(25))
cat("*** fibRiter => fibResult: ", fibResult, "\n")
library(Rcpp)
library(inline)
fibRcppIter <- cxxfunction(signature(xs="int"),
plugin="Rcpp",
body='
int n = Rcpp::as<int>(xs);
double first = 0;
double second = 1;
double third = 0;
for (int i=0; i<n; i++) {
third = first + second;
first = second;
second = third;
}
return Rcpp::wrap(first);
')
fibRcppIterResult <- fibRcppIter(25);
cat("*** fibRcppIterResult: ", fibRcppIterResult, "\n")
require(devtools)
evalCpp("1+1")
require(Rcpp)
evalCpp("1+1")
require(Rcpp)
require(inline)
fibRcppIter <- cxxfunction(signature(xs="int"),
plugin="Rcpp",
body='
int n = Rcpp::as<int>(xs);
double first = 0;
double second = 1;
double third = 0;
for (int i=0; i<n; i++) {
third = first + second;
first = second;
second = third;
}
return Rcpp::wrap(first);
')
fibRcppIterResult <- fibRcppIter(25);
cat("*** fibRcppIterResult: ", fibRcppIterResult, "\n")
source("http://bioconductor.org/biocLite.R") 
source("http://bioconductor.org/biocLite.R") 
biocLite("Rsamtools") 
xx <- faithful$eruptions
xx
faithful
head(faithful)
library(Rsamtool)
library(Rsamtools)
vignettes(Rsamtools)
vignette(Rsamtools)
vignette("Rsamtools")
?vignette
vignette()
vignette("Rsamtools-Overview")
vignette("Rsamtools-UsingCLibraries")
which <- RangesList(seq1=IRanges(1000, 2000),seq2=IRanges(c(100, 1000), c(1000, 2000)))
what <- c("rname", "strand", "pos", "qwidth", "seq")
param <- ScanBamParam(which=which, what=what)
bamFile <-system.file("extdata", "ex1.bam", package="Rsamtools")
bam <- scanBam(bamFile, param=param)
1L
library(BSgenome)
library(BSgenomes)
source("http://bioconductor.org/biocLite.R")
biocLite("BSgenome")
library(BSgenome)
library(BSgenome)
install.packages("VLMC")
chooseBioCmirror()
setRepositories()
setRepositories()
install.packages("~/Downloads/BSgenome_1.32.0.tar", repos = NULL)
install.packages("~/Downloads/BSgenome_1.32.0-2.tar", repos = NULL)
library(BSgenome)
biocLite("BiocGenerics")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("BSgenome")
available.genomes()
available.genomes()
library(BSgenome)
available.genomes()
biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
biocLite("BSgenome.Btaurus.UCSC.bosTau3")
biocLite("BSgenome.Btaurus.UCSC.bosTau3")
library(BSgenome.Btaurus.UCSC.bosTau3)
?BSgenome
genomeBtau3 <- BSgenome.Btaurus.UCSC.bosTau3
?BSgenome.Btaurus.UCSC.bosTau3
Btaurus
sourceUrl(Btaurus)
seqnames(Btaurus)
seqlengths(Btaurus)
mseqnames(Btaurus)
names(Btaurus)
objects()
ls()
masknames(Btaurus)
?vlmc
library(VLMC)
?vlmc
qchisq(0.05, df = 3, lower.tail = FALSE)
qchisq(0.05, df = 3, lower.tail = FALSE)/2
qchisq(0.05, df = 3, lower.tail = FALSE)/2
qchisq(0.01, df = 3, lower.tail = FALSE)/2
alphabet.dna <- c("A","C","G","T")
card.dna <- length(alphabet.dna)
alpha.percent  <- c(0.05, 0.01)
sapply(alpha.percent, function(x) return(qchisq(x, card.dna, lower.tail = FALSE)/2))
card.dna <- length(alphabet.dna) - 1
sapply(alpha.percent, function(x) return(qchisq(x, card.dna, lower.tail = FALSE)/2))
sapply(alpha.percent, function(x) return(round(qchisq(x, card.dna, lower.tail = FALSE)/2), digits = 2)
()
)
sapply(alpha.percent, function(x) return(round(qchisq(x, card.dna, lower.tail = FALSE)/2, digits = 2))
)
sapply(alpha.percent, function(x) return(qchisq(x, card.dna, lower.tail = FALSE)/2))
cutoff.values <- sapply(alpha.percent, function(x) return(qchisq(x, card.dna, lower.tail = FALSE)/2))
qchisq(alpha.percent, card.dna, lower.tail = FALSE)/2
qchisq(alpha.percent, card.dna, lower.tail = FALSE)/2[1]
qchisq(alpha.percent, card.dna, lower.tail = FALSE)[1]/2
?plot
lm(formula = LOGRUT ~ ., data = asphalt1)
data(asphalt1)
data()
library(Biostrings)
browseVignettes()
installed.packages()
head(installed.packages())
library(GenomicRanges)
?GRanges
help.start()
?GRanges
x <- rev(rep(6:10, 1:5))
x
rle(x)
rle(1:5)
?IRanges
50*1.24
2000/17.38
source("http://bioconductor.org/biocLite.R")
biocLite("GWASTools")
browseVignettes("GWASTools")
?identical
?equal
?all.equal
install.packages("installr");
installed.packages()
dfInstPack <- installed.packages()
head dfInstPack
head(dfInstPack)
colnames(dfInstPack)
getwd()
objects()
?write.table
write.csv2(dfInstPack, file="installed_packages.csv", quote=FALSE, row.names = FALSE)
getwd()
list.files()
dfInstPack <- read.csv2(file = "installed_packages.csv", header = TRUE, row.names = FALSE)
dfInstPack <- read.csv2(file = "installed_packages.csv", header = TRUE)
dim(dfInstPack)
dim(dfInstPack)
head(dfInstPack)
head(dfInstPack[,"Package"])
colnames(dfInstPack)
dfInstPack[1,]
list.files()
vInstPack <- readLines(file = "RframeworkVersion30ResourceLibrary.txt")
vInstPack <- readLines(file = "RframeworkVersion30ResourceLibrary.txt")
list.files*()
list.files()
vInstPack <- readLines(con = file("RframeworkVersion30ResourceLibrary.txt"))
vInstPack
require(base)
require(BSgenome.Scerevisiae.UCSC.sacCer3)
idx <- 1
if (require(vInstPack[idx])) cat("install.package()\n") else cat("ok\n")
idx <- idx+1
if (require(vInstPack[idx])) cat("install.package()\n") else cat("ok\n")
require(vInstPack[idx])
require(AnnotationDbi)
if (require(AnnotationDbi)) cat("install.package()\n") else cat("ok\n")
if (require(BSgenome.Scerevisiae.UCSC.sacCer3)) cat("install.package()\n") else cat("ok\n")
library(AnnotationDbi)
.libPaths()
list.files("/Library/Frameworks/R.framework/Versions")
list.files("/Library/Frameworks/R.framework/Versions/3.0")
list.files("/Library/Frameworks/R.framework/Versions/3.0/Resources")
list.files("/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
for (p in setdiff(list.files("/Library/Frameworks/R.framework/Versions/3.0/Resources/library"),installed.packages())) cat("install.packages(",p,")\n")
connections()
library(slidify)
?slidify
setwd("~/Data/Projects/GitHub")
author('dplyrIntro')
library(dplyr)
?library
install.packages('dplyr')
library(dplyr)
browseVignettes()
library(nycflights13)
install.packages('nycflights13')
library(nycflights13)
dim(flights)
head(flights)
iris
names(iris)
head(iris)
iris[Sepal.length > 5.5 & Species == "setosa",]
iris[iris$Sepal.length > 5.5 & iris$Species == "setosa",]
iris[iris$Sepal.length > 5.2 & iris$Species == "setosa",]
iris[iris$Species == "setosa",]
iris[iris$Sepal.Length > 5.2 & iris$Species == "setosa",]
iris[iris$Sepal.Length > 5.5 & iris$Species == "setosa",]
openVignette()
?browseVignettes
browseVignettes(package = 'dplyr')
?nycflights13
filter(flights, month == 1, day == 1)
filter(flights, month == 1, day == 1, carrier == "UA")
filter(flights, month == 1, day == 1)
slice(iris, 1:3)
slice(iris, 11:13)
iris
slice(iris, 50:52)
planes <- group_by(flights, tailnum)
planes
flights
delay <- summarise(planes,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay
?n
head(iris)
irisSpecies <- group_by(iris,Species)
irisSpecies
irisLength <- summarize(irisSpecies, count = n(), sep_len = mean(Sepal.Length, na.rm = TRUE), pet_len = mean(Petal.Length, na.rm = TRUE))
irisLength
library(ggplot)
?gglot
?ggplot
??ggplot
?tbl_df
?slidify
system.file("skeleton", package = "slidify")
list.files("/Library/Frameworks/R.framework/Versions/3.1/Resources/library/slidify/skeleton")
list.files("/Library/Frameworks/R.framework/Versions/3.1/Resources/library/slidify/skeleton/assets")
list.files("/Library/Frameworks/R.framework/Versions/3.1/Resources/library/slidify/skeleton/assets/layouts")
file.info("/Library/Frameworks/R.framework/Versions/3.1/Resources/library/slidify/skeleton/assets/layouts")
list.files("/Library/Frameworks/R.framework/Versions/3.1/Resources/library/slidify/skeleton/assets/layouts")
?knit2slides
?slidify::knit2slides
??slidify::knit2slides
help(knit2slides, package=slidify)
browseVignettes(package = dplyr)
library(dplyr)
browseVignettes(package = dplyr)
browseVignettes(package = "dplyr")
?rmarkdown::render
library(knitr)
setwd("~/Data/Projects/GitHub/charlotte-ngs.github.io/_posts")
list.files()
knit(input = "2014-10-22-IntroductionToDplyr.Rmd")
ls -la
list.files
list.files()
system("echo $PATH")
system("which pdflatex")
system("pdflatex")
?makevar
?setenv
?.setenv
?system
system("echo $PATH")
